{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AI Solution Kit provides solutions of various use cases, allowing you to use out-of-box AI solutions, such as text recognition (OCR) solution, image super resolution solution, pornography detection solution, human segmentation solution. Benefits Best practices for multiple scenarios You can find the code implementation of most common AI use cases. All solutions and applications included are vetted by Amazon Web Services. Out-of-box AI features The solutions automatically create RESTful APIs through Amazon API Gateway. After deploying the solution, you can send HTTP POST requests to use the AI functions. The deployment guides provides all API test methods (e.g. Postman) and offers sample codes. Open Source and Customization All the solutions are open sourced. You can use the solutions and applications for free. If you have different use cases, you can take the source code as reference to make your own implementation. AI features Vision Feature Name Description Deployment General OCR Based on artificial intelligence OCR (Optical Character Recognition) technology, which can automatically recognize text from images, and return the coordinate position and confidence scores of the text Get started Image Super Resolution Upscale the resolution of images and increase the details in the images Get started Human Image Segmentation Segment human bodies from background Get started Nudity Detection Provide confidence scores of the images in multiple dimensions (normal, sexy, porn) Get started General OCR (Traditional Chinese) Based on artificial intelligence OCR (Optical Character Recognition) technology, it can automatically recognize the text in the picture, and return the coordinate position, confidence and other information of the text in the picture, support traditional Chinese Get started Custom OCR Users can create structured templates, automatically identify and output structured results through self-service templates Get started Object Recognition Detects objects and scenes in the image and returns them and the confidence percentage for each object and scene Get started Face Detection Detect and locate the face in the picture or video stream, and return the high-precision coordinate information of the face frame Get started Face Comparison The facial features of the face in the picture were extracted and analyzed with high precision to obtain the similarity of two faces Get started Human Attribute Recognition Detect the attributes of the human body in the picture Get started Car License Plate Identifying the number plate information of motor vehicles within China Get started Natural Language Feature Name Description Deployment Text Similarity Evaluate the similarity of two words, sentences, paragraphs or documents. Score how similar or different two texts are Get started","title":"Welcome"},{"location":"#benefits","text":"Best practices for multiple scenarios You can find the code implementation of most common AI use cases. All solutions and applications included are vetted by Amazon Web Services. Out-of-box AI features The solutions automatically create RESTful APIs through Amazon API Gateway. After deploying the solution, you can send HTTP POST requests to use the AI functions. The deployment guides provides all API test methods (e.g. Postman) and offers sample codes. Open Source and Customization All the solutions are open sourced. You can use the solutions and applications for free. If you have different use cases, you can take the source code as reference to make your own implementation.","title":"Benefits"},{"location":"#ai-features","text":"","title":"AI features"},{"location":"#vision","text":"Feature Name Description Deployment General OCR Based on artificial intelligence OCR (Optical Character Recognition) technology, which can automatically recognize text from images, and return the coordinate position and confidence scores of the text Get started Image Super Resolution Upscale the resolution of images and increase the details in the images Get started Human Image Segmentation Segment human bodies from background Get started Nudity Detection Provide confidence scores of the images in multiple dimensions (normal, sexy, porn) Get started General OCR (Traditional Chinese) Based on artificial intelligence OCR (Optical Character Recognition) technology, it can automatically recognize the text in the picture, and return the coordinate position, confidence and other information of the text in the picture, support traditional Chinese Get started Custom OCR Users can create structured templates, automatically identify and output structured results through self-service templates Get started Object Recognition Detects objects and scenes in the image and returns them and the confidence percentage for each object and scene Get started Face Detection Detect and locate the face in the picture or video stream, and return the high-precision coordinate information of the face frame Get started Face Comparison The facial features of the face in the picture were extracted and analyzed with high precision to obtain the similarity of two faces Get started Human Attribute Recognition Detect the attributes of the human body in the picture Get started Car License Plate Identifying the number plate information of motor vehicles within China Get started","title":"Vision"},{"location":"#natural-language","text":"Feature Name Description Deployment Text Similarity Evaluate the similarity of two words, sentences, paragraphs or documents. Score how similar or different two texts are Get started","title":"Natural Language"},{"location":"api-explorer/","text":"\u5f53\u60a8\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5c06\u53c2\u6570 APIExplorer \u8bbe\u7f6e\u4e3a yes \uff0c\u5373\u53ef\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 AIExplorer \u4e3a\u524d\u7f00\u7684URL\uff0c\u901a\u8fc7\u8be5URL\u5373\u53ef\u8bbf\u95ee\u57fa\u4e8e Swagger UI \u7684API \u8d44\u6e90\u6d4f\u89c8\u5668\u3002 API \u8d44\u6e90\u6d4f\u89c8\u5668\u63d0\u4f9b\u4e86\u4e00\u4e2a\u663e\u793a\u6846\u67b6\uff0c\u63d0\u4f9b\u57fa\u4e8e Swagger UI \u7684\u4ea4\u4e92\u5f0f\u6587\u6863\u7f51\u7ad9\uff0c\u65b9\u4fbf\u7528\u6237\u8bfb\u53d6\u57fa\u4e8e OpenAPI \u89c4\u8303\u5b9a\u4e49\u7684 AI \u5e94\u7528\u63a5\u53e3\u89c4\u8303\u6587\u6863\u5e76\u652f\u6301\u96c6\u6210\u6d4b\u8bd5\u3002\u4e0b\u9762\u4ee5 \u901a\u7528\u6587\u672c\u8bc6\u522b \u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 API \u8d44\u6e90\u6d4f\u89c8\u5668 \u67e5\u770b\u5e76\u6d4b\u8bd5 API \u8c03\u7528\u3002 //TODO","title":"Api explorer"},{"location":"changelog/","text":"\u66f4\u65b0\u65f6\u95f4\uff1a2022-04-25 \u53d1\u5e03\u65e5\u671f \u8bf4\u660e 2021\u5e749\u6708 \u53d1\u5e03 v1.0.0 AI \u529f\u80fd \u901a\u7528\u6587\u5b57\u8bc6\u522b \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 2022\u5e744\u6708 \u53d1\u5e03 v1.2.0 AI \u529f\u80fd\u66f4\u65b0 \u4f18\u5316\u901a\u7528\u6587\u5b57\u8bc6\u522b\u6a21\u578b \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u81ea\u5b9a\u4e49\u6a21\u7248\u6587\u5b57\u8bc6\u522b \u901a\u7528\u7269\u4f53\u8bc6\u522b \u4eba\u8138\u8bc6\u522b \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u4eba\u4f53\u7ed3\u6784\u5316\u5c5e\u6027 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u6587\u672c\u76f8\u4f3c\u5ea6 \u67b6\u6784\u5347\u7ea7 \u652f\u6301 OpenAPI \u89c4\u8303 AI \u6a21\u578b\u5bb9\u5668\u5316 CDK \u5347\u7ea7\u81f3 1.143.0 \u652f\u6301 CloudFormation \u7edf\u4e00\u90e8\u7f72","title":"Changelog"},{"location":"cost/","text":"\u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e744\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a \u5411Amazon API Gateway\u53d1\u9001\u8bf7\u6c42\u7684\u6b21\u6570\u3002 \u8c03\u7528AWS Lambda\u7684\u6b21\u6570\u3002 \u8be6\u60c5\u8bf7\u53c2\u9605\u5bf9\u5e94 AI \u5e94\u7528\u6280\u672f\u624b\u518c\u4e2d\u7684\u6210\u672c\u9884\u4f30\u7ae0\u8282\uff0c\u4e86\u89e3\u5404 AI \u5e94\u7528\u7684\u90e8\u7f72\u4e0e\u4f7f\u7528\u6210\u672c\u3002","title":"Cost"},{"location":"deploy-car-license-plate/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CarLicensePlate \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy car license plate"},{"location":"deploy-car-license-plate/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-car-license-plate/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-car-license-plate/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-car-license-plate/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CarLicensePlate \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-car-license-plate/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-car-license-plate/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-car-license-plate/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-car-license-plate/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-car-license-plate/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-car-license-plate/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-custom-ocr/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CustomOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy custom ocr"},{"location":"deploy-custom-ocr/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-custom-ocr/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-custom-ocr/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-custom-ocr/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CustomOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-custom-ocr/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-custom-ocr/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-custom-ocr/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-custom-ocr/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-custom-ocr/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-custom-ocr/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-face-comparison/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceComparison \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy face comparison"},{"location":"deploy-face-comparison/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-face-comparison/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-face-comparison/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-face-comparison/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceComparison \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-face-comparison/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-face-comparison/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-face-comparison/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-face-comparison/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-face-comparison/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-face-comparison/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-face-detection/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy face detection"},{"location":"deploy-face-detection/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-face-detection/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-face-detection/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-face-detection/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-face-detection/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-face-detection/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-face-detection/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-face-detection/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-face-detection/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-face-detection/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-general-ocr-traditional/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCRTraditional \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy general ocr traditional"},{"location":"deploy-general-ocr-traditional/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-general-ocr-traditional/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-general-ocr-traditional/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-general-ocr-traditional/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCRTraditional \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-general-ocr-traditional/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-general-ocr-traditional/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-general-ocr-traditional/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-general-ocr-traditional/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-general-ocr-traditional/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-general-ocr-traditional/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-general-ocr/","text":"\u901a\u7528\u6587\u672c\u8bc6\u522b\u89e3\u51b3\u65b9\u6848\u57fa\u4e8e\u4eba\u5de5\u667a\u80fd\u6587\u672c\u8bc6\u522b\u6280\u672f\uff0c\u81ea\u52a8\u5b8c\u6210\u5404\u7c7b\u573a\u666f\u4e2d\u6587\u5b57\u7684\u8bc6\u522b\uff0c\u5e76\u8fd4\u56de\u6587\u5b57\u5728\u56fe\u7247\u4e2d\u7684\u5750\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\u4ee5\u4fbf\u4e8e\u5ba2\u6237\u8fdb\u884c\u6bd4\u5bf9\u6216\u7ed3\u6784\u5316\u7b49\u64cd\u4f5c\uff0c\u5bf9\u5ba2\u6237\u7684\u5de5\u4f5c\u6d41\u7a0b\u548c\u4e1a\u52a1\u6d41\u7a0b\u8fdb\u884c\u4e86\u6781\u5927\u7684\u6539\u8fdb\uff0c\u53ef\u6ee1\u8db3\u533b\u7597\u3001\u91d1\u878d\u3001\u653f\u52a1\u3001\u6cd5\u52a1\u3001\u6559\u80b2\u7b49\u884c\u4e1a\u6587\u6863\u5feb\u901f\u5f55\u5165\u7684\u9700\u6c42\uff0c\u6709\u6548\u964d\u4f4e\u4f01\u4e1a\u4eba\u529b\u6210\u672c\uff0c\u63d0\u9ad8\u4fe1\u606f\u5f55\u5165\u6548\u7387\u3002\u76ee\u524d\u652f\u6301\u8bc6\u522b\u7b80\u4f53/\u7e41\u4f53\u4e2d\u6587\uff0c\u82f1\u6587\u548c\u6570\u5b57\u3002\u53ef\u5c06\u56fe\u7247\u4e0a\u7684\u6587\u5b57\u8bc6\u522b\u4e3a\u6587\u672c\uff0c\u5e76\u8fd4\u56de\u5bf9\u5e94\u6587\u5b57\u7684\u5750\u6807\u4e0e\u7f6e\u4fe1\u5ea6\uff0c\u5e76\u4e14\u672c\u89e3\u51b3\u65b9\u6848\u8fd8\u589e\u5f3a\u4e86\u5bf9\u4e2d\u6587\u8bed\u8a00\u7684\u5904\u7406\u4e0e\u8bc6\u522b\u80fd\u529b\uff0c\u7ed3\u5408\u7cbe\u51c6\u7684\u8bed\u8a00\u6a21\u578b\u548c\u5927\u8bcd\u5e93\uff0c\u5982\u9999\u6e2f\u589e\u8865\u5b57\u7b26\u96c6\uff08HKSCS\uff09\u7b49\u5927\u5b57\u7b26\u96c6\u8bc6\u522b\uff0c\u4ece\u800c\u63d0\u9ad8\u8f93\u5165\u8f6c\u5316\u6548\u7387\u3002 \u9002\u7528\u573a\u666f \u901a\u7528\u6587\u672c\u8bc6\u522b\u89e3\u51b3\u65b9\u6848\u5177\u6709\u4e2d\u6587\u8bc6\u522b\u7cbe\u5ea6\uff08\u51c6\u786e\u7387\uff09\u9ad8\u3001\u4ef7\u683c\u4f4e\u3001\u5904\u7406\u901f\u5ea6\u5feb\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': 'https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"Deploy general ocr"},{"location":"deploy-general-ocr/#_1","text":"\u901a\u7528\u6587\u672c\u8bc6\u522b\u89e3\u51b3\u65b9\u6848\u5177\u6709\u4e2d\u6587\u8bc6\u522b\u7cbe\u5ea6\uff08\u51c6\u786e\u7387\uff09\u9ad8\u3001\u4ef7\u683c\u4f4e\u3001\u5904\u7406\u901f\u5ea6\u5feb\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-general-ocr/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-general-ocr/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-general-ocr/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-general-ocr/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-general-ocr/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-general-ocr/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-general-ocr/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': 'https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-general-ocr/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-general-ocr/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-human-attribute-recognition/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CustomOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy human attribute recognition"},{"location":"deploy-human-attribute-recognition/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-human-attribute-recognition/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-human-attribute-recognition/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-human-attribute-recognition/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CustomOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-human-attribute-recognition/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-human-attribute-recognition/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-human-attribute-recognition/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-human-attribute-recognition/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-human-attribute-recognition/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-human-attribute-recognition/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-human-image-segmentation/","text":"\u667a\u80fd\u4eba\u50cf\u5206\u5272\u65b9\u6848\u57fa\u4e8e AI \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u8bc6\u522b\u56fe\u50cf\u4e2d\u7684\u4eba\u4f53\u8f6e\u5ed3\uff0c\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u5206\u5272\uff0c\u4f7f\u4e4b\u4e0e\u80cc\u666f\u8fdb\u884c\u5206\u79bb\u3002 \u9002\u7528\u573a\u666f \u4f20\u7edf\u4eba\u50cf\u62a0\u56fe\u9700\u8981\u4eba\u5de5\u6765\u5b8c\u6210\uff0c\u5e76\u4e14\u5408\u6210\u6548\u679c\u4e0d\u7a33\u5b9a\u3002\u672c\u89e3\u51b3\u65b9\u6848\u5177\u6709\u5904\u7406\u901f\u5ea6\u5feb\u3001\u76ee\u6807\u7269\u4f53\u68c0\u6d4b\u51c6\u786e\u3001\u4ef7\u683c\u4f4e\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u540e\u671f\u5904\u7406\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u3001\u80cc\u666f\u865a\u5316\u7b49\u591a\u79cd\u573a\u666f\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b HumanImageSegmentation \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 aikitsInvokeURL \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL \u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u53bb\u9664\u80cc\u666f\u540e\u7684 base64 \u7f16\u7801\u7684 Alpha \u901a\u9053\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': 'https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanImageSegmentation \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"Deploy human image segmentation"},{"location":"deploy-human-image-segmentation/#_1","text":"\u4f20\u7edf\u4eba\u50cf\u62a0\u56fe\u9700\u8981\u4eba\u5de5\u6765\u5b8c\u6210\uff0c\u5e76\u4e14\u5408\u6210\u6548\u679c\u4e0d\u7a33\u5b9a\u3002\u672c\u89e3\u51b3\u65b9\u6848\u5177\u6709\u5904\u7406\u901f\u5ea6\u5feb\u3001\u76ee\u6807\u7269\u4f53\u68c0\u6d4b\u51c6\u786e\u3001\u4ef7\u683c\u4f4e\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u540e\u671f\u5904\u7406\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u3001\u80cc\u666f\u865a\u5316\u7b49\u591a\u79cd\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-human-image-segmentation/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-human-image-segmentation/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-human-image-segmentation/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b HumanImageSegmentation \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-human-image-segmentation/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-human-image-segmentation/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 aikitsInvokeURL \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL \u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-human-image-segmentation/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u53bb\u9664\u80cc\u666f\u540e\u7684 base64 \u7f16\u7801\u7684 Alpha \u901a\u9053\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" }","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-human-image-segmentation/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': 'https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-human-image-segmentation/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanImageSegmentation \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-human-image-segmentation/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-image-super-resolution/","text":"\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u65b9\u6848\u57fa\u4e8e AI \u63a8\u7406\uff0c\u53ef\u5c06\u56fe\u7247\u8fdb\u884c\u667a\u80fd\u653e\u59272\u52304\u500d\uff0c\u5e76\u4fdd\u6301\u7ed3\u679c\u56fe\u50cf\u7684\u6e05\u6670\u5ea6\uff0c\u4ece\u800c\u83b7\u53d6\u6e05\u6670\u5ea6\u66f4\u9ad8\u3001\u7ec6\u8282\u4e30\u5bcc\u7684\u56fe\u50cf\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\u3002 \u9002\u7528\u573a\u666f \u672c\u89e3\u51b3\u65b9\u6848\u5177\u6709\u5904\u7406\u901f\u5ea6\u5feb\u3001\u4ef7\u683c\u4f4e\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u53ef\u4ee5\u89e3\u51b3\u56fe\u50cf\u653e\u5927\u4e4b\u540e\u6a21\u7cca\u5931\u771f\u7684\u95ee\u9898\uff0c\u63d0\u5347\u7ec6\u8282\u4fdd\u6301\u7ed3\u679c\u56fe\u50cf\u7684\u6e05\u6670\u5ea6\u3002\u5e94\u7528\u4e8e\u7b49\u591a\u79cd\u573a\u666f\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ImageSuperResolution \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71920 * 1080\uff0c\u5728\u5f00\u542f\u4eba\u50cf\u589e\u5f3a\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71280 * 720\u3002Lambda \u7248\u672c\u65b9\u6848\u7531\u4e8e\u6027\u80fd\u9650\u5236\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc7400 * 400 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e scale Integer \u5426 \u56fe\u50cf\u653e\u5927\u500d\u6570\uff0c\u652f\u6301\u653e\u5927\u500d\u6570\u4e3a2\u62164\uff0c\u9ed8\u8ba4\u503c\u4e3a2 face Bool \u5426 \u5f53True\u65f6\uff0c\u989d\u5916\u5f00\u542f\u4eba\u8138\u589e\u5f3a\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002\uff08\u4ec5\u652f\u6301 GPU \u7248\u672c\u90e8\u7f72\u65b9\u5f0f\uff09 \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\", \"scale\" : 2 } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\", \"scale\" : 4 } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u6309\u6bd4\u4f8b\u653e\u5927\u540e base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': 'https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"Deploy image super resolution"},{"location":"deploy-image-super-resolution/#_1","text":"\u672c\u89e3\u51b3\u65b9\u6848\u5177\u6709\u5904\u7406\u901f\u5ea6\u5feb\u3001\u4ef7\u683c\u4f4e\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u53ef\u4ee5\u89e3\u51b3\u56fe\u50cf\u653e\u5927\u4e4b\u540e\u6a21\u7cca\u5931\u771f\u7684\u95ee\u9898\uff0c\u63d0\u5347\u7ec6\u8282\u4fdd\u6301\u7ed3\u679c\u56fe\u50cf\u7684\u6e05\u6670\u5ea6\u3002\u5e94\u7528\u4e8e\u7b49\u591a\u79cd\u573a\u666f\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-image-super-resolution/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-image-super-resolution/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-image-super-resolution/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ImageSuperResolution \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-image-super-resolution/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-image-super-resolution/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-image-super-resolution/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71920 * 1080\uff0c\u5728\u5f00\u542f\u4eba\u50cf\u589e\u5f3a\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71280 * 720\u3002Lambda \u7248\u672c\u65b9\u6848\u7531\u4e8e\u6027\u80fd\u9650\u5236\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc7400 * 400 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e scale Integer \u5426 \u56fe\u50cf\u653e\u5927\u500d\u6570\uff0c\u652f\u6301\u653e\u5927\u500d\u6570\u4e3a2\u62164\uff0c\u9ed8\u8ba4\u503c\u4e3a2 face Bool \u5426 \u5f53True\u65f6\uff0c\u989d\u5916\u5f00\u542f\u4eba\u8138\u589e\u5f3a\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002\uff08\u4ec5\u652f\u6301 GPU \u7248\u672c\u90e8\u7f72\u65b9\u5f0f\uff09 \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\", \"scale\" : 2 } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\", \"scale\" : 4 } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u6309\u6bd4\u4f8b\u653e\u5927\u540e base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" }","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-image-super-resolution/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': 'https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-image-super-resolution/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-image-super-resolution/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-nudity-detection/","text":"\u5185\u5bb9\u5ba1\u6838-\u8272\u60c5\u56fe\u7247\u8bc6\u522b\u65b9\u6848\u57fa\u4e8eAI \u6280\u672f\uff0c\u81ea\u52a8\u5bf9\u56fe\u7247\u8fdb\u884c\u5ba1\u6838\uff0c\u8bc6\u522b\u53ca\u83b7\u53d6\u591a\u7ef4\u5ea6\u8272\u60c5\u91cf\u5316\u4fe1\u606f\uff08normal\uff0csexy\uff0cporn\uff09\uff0c\u5b9e\u73b0\u7cbe\u51c6\u5feb\u901f\u7684\u8272\u60c5\u503e\u5411\u5224\u65ad\u3002 \u9002\u7528\u573a\u666f \u672c\u89e3\u51b3\u65b9\u6848\u5177\u6709\u8bc6\u522b\u7cbe\u5ea6\uff08\u51c6\u786e\u7387\uff09\u9ad8\u3001\u4ef7\u683c\u4f4e\u3001\u5904\u7406\u901f\u5ea6\u5feb\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u901a\u8fc7\u667a\u80fd\u8bc6\u522b\u56fe\u7247\u5185\u5bb9\uff0c\u5e76\u5bf9\u8272\u60c5\u7a0b\u5ea6\u8fdb\u884c\u591a\u7ef4\u5ea6\u6253\u5206\uff0c\u65b9\u4fbf\u5ba2\u6237\u5bf9\u6d89\u9ec4\u5185\u5bb9\u8fdb\u884c\u5feb\u901f\u5904\u7406\uff0c\u5e2e\u52a9\u5ba2\u6237\u51cf\u5c11\u5ba1\u6838\u4eba\u529b\uff0c\u6709\u6548\u964d\u4f4e\u6d89\u9ec4\u98ce\u9669\uff0c\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 NudityDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b NudityDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 NudityDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e normal Float \u8bc6\u522b\u56fe\u50cf\u7684\u6b63\u5e38\u7ef4\u5ea6\u5360\u6bd4 sexy Float \u8bc6\u522b\u56fe\u50cf\u7684\u6027\u611f\u7ef4\u5ea6\u5360\u6bd4 porn Float \u8bc6\u522b\u56fe\u50cf\u7684\u8272\u60c5\u7ef4\u5ea6\u5360\u6bd4 \u8fd4\u56de\u793a\u4f8b { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/nudity_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/nudity_detection' payload = { 'url': 'https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/nudity_detection\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/nudity_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 NudityDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 NudityDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"Deploy nudity detection"},{"location":"deploy-nudity-detection/#_1","text":"\u672c\u89e3\u51b3\u65b9\u6848\u5177\u6709\u8bc6\u522b\u7cbe\u5ea6\uff08\u51c6\u786e\u7387\uff09\u9ad8\u3001\u4ef7\u683c\u4f4e\u3001\u5904\u7406\u901f\u5ea6\u5feb\u3001\u53ef\u79c1\u6709\u5316\u90e8\u7f72\u7b49\u4f18\u52bf\uff0c\u80fd\u6709\u6548\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u6570\u636e\u3002\u901a\u8fc7\u667a\u80fd\u8bc6\u522b\u56fe\u7247\u5185\u5bb9\uff0c\u5e76\u5bf9\u8272\u60c5\u7a0b\u5ea6\u8fdb\u884c\u591a\u7ef4\u5ea6\u6253\u5206\uff0c\u65b9\u4fbf\u5ba2\u6237\u5bf9\u6d89\u9ec4\u5185\u5bb9\u8fdb\u884c\u5feb\u901f\u5904\u7406\uff0c\u5e2e\u52a9\u5ba2\u6237\u51cf\u5c11\u5ba1\u6838\u4eba\u529b\uff0c\u6709\u6548\u964d\u4f4e\u6d89\u9ec4\u98ce\u9669\uff0c\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-nudity-detection/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-nudity-detection/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-nudity-detection/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 NudityDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b NudityDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-nudity-detection/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-nudity-detection/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 NudityDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-nudity-detection/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e normal Float \u8bc6\u522b\u56fe\u50cf\u7684\u6b63\u5e38\u7ef4\u5ea6\u5360\u6bd4 sexy Float \u8bc6\u522b\u56fe\u50cf\u7684\u6027\u611f\u7ef4\u5ea6\u5360\u6bd4 porn Float \u8bc6\u522b\u56fe\u50cf\u7684\u8272\u60c5\u7ef4\u5ea6\u5360\u6bd4 \u8fd4\u56de\u793a\u4f8b { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 }","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-nudity-detection/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/nudity_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/nudity_detection' payload = { 'url': 'https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/nudity_detection\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/nudity_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-nudity-detection/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 NudityDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-nudity-detection/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 NudityDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-object-recognition/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ObjectRecognition \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy object recognition"},{"location":"deploy-object-recognition/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-object-recognition/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-object-recognition/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-object-recognition/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ObjectRecognition \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-object-recognition/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-object-recognition/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-object-recognition/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-object-recognition/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-object-recognition/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-object-recognition/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-text-similarity/","text":"TODO \u9002\u7528\u573a\u666f TODO \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b TextSimilarity \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Deploy text similarity"},{"location":"deploy-text-similarity/#_1","text":"TODO","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-text-similarity/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-text-similarity/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-text-similarity/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b TextSimilarity \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-text-similarity/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-text-similarity/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-text-similarity/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"TODO\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-text-similarity/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"TODO\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'TODO' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"TODO\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"TODO\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-text-similarity/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"TODO\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-text-similarity/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deployment/","text":"\u672c\u90e8\u5206\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 AI Solution Kit \u89e3\u51b3\u65b9\u6848\u3002\u5bf9\u4e8e\u89e3\u51b3\u65b9\u6848\u4e2d\u5305\u542b\u7684 AI \u5e94\u7528\u7684\u8be6\u7ec6\u90e8\u7f72\u4e0e\u4f7f\u7528\u8bf4\u660e\uff0c\u5728\u5bf9\u5e94\u7684\u6280\u672f\u624b\u518c\u4e2d\u6709\u8be6\u7ec6\u8bf4\u660e\u3002\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u4e4b\u524d\uff0c\u5efa\u8bae\u60a8\u5148\u67e5\u770b\u672c\u6307\u5357\u4e2d\u6709\u5173\u67b6\u6784\u56fe\u548c\u533a\u57df\u652f\u6301\u7b49\u4fe1\u606f\uff0c\u7136\u540e\u6309\u7167\u4e0b\u9762\u7684\u8bf4\u660e\u914d\u7f6e\u89e3\u51b3\u65b9\u6848\u5e76\u5c06\u5176\u90e8\u7f72\u5230\u60a8\u7684\u5e10\u6237\u4e2d\u3002 \u90e8\u7f72\u65f6\u95f4 \u90e8\u7f72\u57fa\u4e8e Amazon Lambda \u67b6\u6784\u7684 AI \u5e94\u7528\uff1a\u7ea6 10 \u5206\u949f \u90e8\u7f72\u57fa\u4e8e Amazon SageMaker \u67b6\u6784\u7684 AI \u5e94\u7528\uff1a\u7ea6 20 \u5206\u949f \u6ce8\u610f \u4ee5\u4e0a\u4e3a\u90e8\u7f72 AI \u5e94\u7528\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u5177\u4f53\u4fe1\u606f\u8bf7\u53c2\u8003\u5404\u4e2a\u5e94\u7528\u5bf9\u5e94\u7684\u6280\u672f\u624b\u518c \u90e8\u7f72\u6982\u8ff0 \u524d\u63d0\u6761\u4ef6\uff08\u4e2d\u56fd\u533a\u57df\uff09 \u672c\u89e3\u51b3\u65b9\u6848\u4f7f\u7528 Amazon API Gateway\u6765\u63a5\u6536 API \u8c03\u7528\u8bf7\u6c42\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u5e0c\u671b\u5728 \u5317\u4eac\u533a\u57df \u63d0\u4f9b\u65e0\u9700\u8eab\u4efd\u9a8c\u8bc1\u5373\u53ef\u8bbf\u95ee\u7684 API \u8bf7\u6c42\uff0c\u5219\u9700\u8981\u7533\u8bf7\u5e76\u786e\u4fdd\u60a8\u7684Amazon Web Services\u8d26\u53f7\u5df2\u901a\u8fc7Internet Content Provider (ICP) \u5907\u6848\uff0c80/443\u7aef\u53e3\u53ef\u4ee5\u6b63\u5e38\u5f00\u542f\uff0c\u5177\u4f53\u6d41\u7a0b\u53c2\u89c1 ICP\u5907\u6848\u8bf4\u660e \u3002 \u90e8\u7f72 Amazon CloudFormation \u6a21\u677f \u767b\u5f55\u5230Amazon Web Services\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u9009\u62e9\u94fe\u63a5\u542f\u52a8 AWS CloudFormation \u6a21\u677f\u3002 \u5feb\u901f\u542f\u52a8\u94fe\u63a5 \u63cf\u8ff0 \u7531\u5149\u73af\u65b0\u7f51\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5317\u4eac\uff09\u533a\u57df\u94fe\u63a5 \u5728 \u5317\u4eac \u533a\u57df\u90e8\u7f72 AI Solution Kit \u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5b81\u590f\uff09\u533a\u57df\u94fe\u63a5 \u5728 \u5b81\u590f \u533a\u57df\u90e8\u7f72 AI Solution Kit \u5168\u7403\u533a\u57df\u94fe\u63a5 \u5728 \u5168\u7403 \u533a\u57df\u90e8\u7f72 AI Solution Kit \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u6a21\u677f\u5c06\u5728\u60a8\u767b\u5f55\u63a7\u5236\u53f0\u540e\u9ed8\u8ba4\u7684\u533a\u57df\u542f\u52a8\u3002\u82e5\u9700\u5728\u6307\u5b9a\u7684Amazon Web Service\u533a\u57df\u4e2d\u542f\u52a8\u8be5\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u5728\u63a7\u5236\u53f0\u5bfc\u822a\u680f\u4e2d\u7684\u533a\u57df\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u3002 \u5728 \u521b\u5efa\u5806\u6808 \u9875\u9762\u4e0a\uff0c\u786e\u8ba4Amazon S3 URL\u6587\u672c\u6846\u4e2d\u663e\u793a\u6b63\u786e\u7684\u6a21\u677fURL\uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u6307\u5b9a\u5806\u6808\u8be6\u7ec6\u4fe1\u606f \u9875\u9762\uff0c\u4e3a\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u5806\u6808\u5206\u914d\u4e00\u4e2a\u8d26\u6237\u5185\u552f\u4e00\u4e14\u7b26\u5408\u547d\u540d\u8981\u6c42\u7684\u540d\u79f0\u3002 \u5728 \u53c2\u6570 \u90e8\u5206\uff0c\u5305\u542b \u901a\u7528\u914d\u7f6e \u548c AI \u5e94\u7528\u5217\u8868 \u4e24\u90e8\u5206\u53c2\u6570\u5185\u5bb9\uff0c\u60a8\u53ef\u4ee5\u5e76\u6839\u636e\u9700\u8981\u8fdb\u884c\u4fee\u6539\u901a\u7528\u914d\u7f6e\u5e76\u9009\u62e9\u9700\u8981\u90e8\u7f72\u7684 AI \u5e94\u7528\uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u901a\u7528\u914d\u7f6e\u53c2\u6570 \u53c2\u6570\u540d\u79f0 \u9ed8\u8ba4\u503c \u63cf\u8ff0 APIGatewayAuthorization AWS_IAM API\u7f51\u5173\u7684\u8ba4\u8bc1\u65b9\u5f0f. \u9ed8\u8ba4\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u4e5f\u53ef\u9009\u62e9 NONE \u5373\u65e0\u6743\u9650\u8ba4\u8bc1\u65b9\u5f0f\uff08\u4e0d\u5b89\u5168\u7684\uff09\uff0c\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u540e\u7528\u6237\u9700\u8981\u624b\u52a8\u5728 API Gateway \u63a7\u5236\u53f0\u914d\u7f6e\u6240\u9700\u7684 \u8d44\u6e90\u8bbf\u95ee\u7b56\u7565 \u3002 APIGatewayStageName prod API\u7f51\u5173\uff08URI\uff09\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84\u5b57\u6bb5\u3002\u8bf7\u53c2\u8003\uff1a \u9636\u6bb5\u53d8\u91cf APIExplorer yes \u90e8\u7f72\u57fa\u4e8e Swagger UI \u7684 API \u8d44\u6e90\u6d4f\u89c8\u5668 \uff0c\u53ef\u89c6\u5316 API \u8d44\u6e90\u5e76\u4e0e\u4e4b\u4ea4\u4e92\u3002\u5b83\u662f\u6839\u636e OpenAPI\uff08\u4ee5\u524d\u79f0\u4e3a Swagger\uff09\u89c4\u8303\u81ea\u52a8\u751f\u6210\u7684\uff0c\u901a\u8fc7\u53ef\u89c6\u5316\u6587\u6863\u4f7f\u67e5\u770b API \u5b9a\u4e49\u4e0e\u6d4b\u8bd5\u53d8\u5f97\u5bb9\u6613\u3002\u8be6\u60c5\u8bf7\u89c1\uff1a API \u8d44\u6e90\u6d4f\u89c8\u5668 AI \u5e94\u7528\u5217\u8868\u53c2\u6570 \u53c2\u6570\u540d\u79f0 \u9ed8\u8ba4\u503c \u63cf\u8ff0 GeneralOCR no \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u6587\u5b57\u8bc6\u522b\u6280\u672f\u624b\u518c ImageSuperResolution no \u90e8\u7f72 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u6280\u672f\u624b\u518c HumanImageSegmentation no \u90e8\u7f72 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u667a\u80fd\u4eba\u50cf\u5206\u5272\u6280\u672f\u624b\u518c NudityDetection no \u90e8\u7f72 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838\u6280\u672f\u624b\u518c GeneralOCRTraditional no \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09\u6280\u672f\u624b\u518c CustomOCR no \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b\u6280\u672f\u624b\u518c ObjectRecognition no \u90e8\u7f72 \u901a\u7528\u7269\u4f53\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u6587\u5b57\u8bc6\u522b\u6280\u672f\u624b\u518c FaceDetection no \u90e8\u7f72 \u4eba\u8138\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u7269\u4f53\u8bc6\u522b\u6280\u672f\u624b\u518c FaceComparison no \u90e8\u7f72 \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4eba\u8138\u8bc6\u522b\u6280\u672f\u624b\u518c HumanAttributeRecognition no \u90e8\u7f72 \u4eba\u4f53\u7ed3\u6784\u5316\u5c5e\u6027 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4eba\u4f53\u7ed3\u6784\u5316\u5c5e\u6027\u6280\u672f\u624b\u518c CarLicensePlate no \u90e8\u7f72 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b\u6280\u672f\u624b\u518c TextSimilarity no \u90e8\u7f72 \u6587\u672c\u76f8\u4f3c\u5ea6 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u6587\u672c\u76f8\u4f3c\u5ea6\u6280\u672f\u624b\u518c \u5728 \u914d\u7f6e\u5806\u6808\u9009\u9879 \u9875\u9762\uff0c\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u5ba1\u6838 \u9875\u9762\uff0c\u67e5\u770b\u5e76\u786e\u8ba4\u8bbe\u7f6e\u3002\u786e\u4fdd\u9009\u4e2d\u786e\u8ba4\u6a21\u677f\u5c06\u521b\u5efaAmazon Identity and Access Management\uff08IAM\uff09\u8d44\u6e90\u7684\u590d\u9009\u6846\u3002\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u9009\u62e9 \u521b\u5efa\u5806\u6808 \u4ee5\u90e8\u7f72\u5806\u6808\u3002 \u60a8\u53ef\u4ee5\u5728AWS CloudFormation\u63a7\u5236\u53f0\u7684 \u72b6\u6001 \u5217\u4e2d\u67e5\u770b\u5806\u6808\u7684\u72b6\u6001\u3002\u521b\u5efa\u5b8c\u6210\u540e\u5373\u53ef\u770b\u5230\u72b6\u6001\u4e3a CREATE_COMPLETE \u3002 \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \u501f\u52a9 Amazon CloudFormation\uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u5806\u6808\u4e2d\u73b0\u6709\u8d44\u6e90\u7684\u5c5e\u6027\uff0c\u5982\u679c\u60a8\u9700\u8981\u6dfb\u52a0\u6216\u5220\u9664\u5df2\u7ecf\u90e8\u7f72\u7684 AI \u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u5806\u6808\u7684\u65b9\u5f0f\u5b8c\u6210\u3002 \u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\uff0c\u9009\u62e9\u5806\u6808\u5217\u8868\u4e2d\u521b\u5efa\u5b8c\u6210\u7684 AI Solution Kit \u5806\u6808\u3002 \u5728\u5806\u6808\u8be6\u7ec6\u4fe1\u606f\u7a97\u683c\u4e2d\uff0c\u9009\u62e9 Update (\u66f4\u65b0)\u3002 \u5728\u6a21\u677f\u53c2\u6570\u90e8\u5206\uff0c\u6307\u5b9a\u9700\u8981\u6dfb\u52a0\u6216\u5220\u9664\u7684 AI \u529f\u80fd\u6216\u53c2\u6570\u4fe1\u606f\uff0c\u7136\u540e\u9009\u62e9 Next (\u4e0b\u4e00\u6b65)\u3002 \u5728 \u914d\u7f6e\u5806\u6808\u9009\u9879 \u9875\u9762\uff0c\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u5ba1\u6838 \u9875\u9762\uff0c\u67e5\u770b\u5e76\u786e\u8ba4\u8bbe\u7f6e\u3002\u786e\u4fdd\u9009\u4e2d\u786e\u8ba4\u6a21\u677f\u5c06\u521b\u5efaAmazon Identity and Access Management\uff08IAM\uff09\u8d44\u6e90\u7684\u590d\u9009\u6846\u3002\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5982\u679c\u60a8\u5bf9\u6240\u505a\u66f4\u6539\u8868\u793a\u6ee1\u610f\uff0c\u8bf7\u9009\u62e9 Updata stack (\u66f4\u65b0\u5806\u6808)\u3002","title":"Deployment"},{"location":"deployment/#_1","text":"\u524d\u63d0\u6761\u4ef6\uff08\u4e2d\u56fd\u533a\u57df\uff09 \u672c\u89e3\u51b3\u65b9\u6848\u4f7f\u7528 Amazon API Gateway\u6765\u63a5\u6536 API \u8c03\u7528\u8bf7\u6c42\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u5e0c\u671b\u5728 \u5317\u4eac\u533a\u57df \u63d0\u4f9b\u65e0\u9700\u8eab\u4efd\u9a8c\u8bc1\u5373\u53ef\u8bbf\u95ee\u7684 API \u8bf7\u6c42\uff0c\u5219\u9700\u8981\u7533\u8bf7\u5e76\u786e\u4fdd\u60a8\u7684Amazon Web Services\u8d26\u53f7\u5df2\u901a\u8fc7Internet Content Provider (ICP) \u5907\u6848\uff0c80/443\u7aef\u53e3\u53ef\u4ee5\u6b63\u5e38\u5f00\u542f\uff0c\u5177\u4f53\u6d41\u7a0b\u53c2\u89c1 ICP\u5907\u6848\u8bf4\u660e \u3002","title":"\u90e8\u7f72\u6982\u8ff0"},{"location":"deployment/#amazon-cloudformation","text":"\u767b\u5f55\u5230Amazon Web Services\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u9009\u62e9\u94fe\u63a5\u542f\u52a8 AWS CloudFormation \u6a21\u677f\u3002 \u5feb\u901f\u542f\u52a8\u94fe\u63a5 \u63cf\u8ff0 \u7531\u5149\u73af\u65b0\u7f51\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5317\u4eac\uff09\u533a\u57df\u94fe\u63a5 \u5728 \u5317\u4eac \u533a\u57df\u90e8\u7f72 AI Solution Kit \u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5b81\u590f\uff09\u533a\u57df\u94fe\u63a5 \u5728 \u5b81\u590f \u533a\u57df\u90e8\u7f72 AI Solution Kit \u5168\u7403\u533a\u57df\u94fe\u63a5 \u5728 \u5168\u7403 \u533a\u57df\u90e8\u7f72 AI Solution Kit \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u6a21\u677f\u5c06\u5728\u60a8\u767b\u5f55\u63a7\u5236\u53f0\u540e\u9ed8\u8ba4\u7684\u533a\u57df\u542f\u52a8\u3002\u82e5\u9700\u5728\u6307\u5b9a\u7684Amazon Web Service\u533a\u57df\u4e2d\u542f\u52a8\u8be5\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u5728\u63a7\u5236\u53f0\u5bfc\u822a\u680f\u4e2d\u7684\u533a\u57df\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u3002 \u5728 \u521b\u5efa\u5806\u6808 \u9875\u9762\u4e0a\uff0c\u786e\u8ba4Amazon S3 URL\u6587\u672c\u6846\u4e2d\u663e\u793a\u6b63\u786e\u7684\u6a21\u677fURL\uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u6307\u5b9a\u5806\u6808\u8be6\u7ec6\u4fe1\u606f \u9875\u9762\uff0c\u4e3a\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u5806\u6808\u5206\u914d\u4e00\u4e2a\u8d26\u6237\u5185\u552f\u4e00\u4e14\u7b26\u5408\u547d\u540d\u8981\u6c42\u7684\u540d\u79f0\u3002 \u5728 \u53c2\u6570 \u90e8\u5206\uff0c\u5305\u542b \u901a\u7528\u914d\u7f6e \u548c AI \u5e94\u7528\u5217\u8868 \u4e24\u90e8\u5206\u53c2\u6570\u5185\u5bb9\uff0c\u60a8\u53ef\u4ee5\u5e76\u6839\u636e\u9700\u8981\u8fdb\u884c\u4fee\u6539\u901a\u7528\u914d\u7f6e\u5e76\u9009\u62e9\u9700\u8981\u90e8\u7f72\u7684 AI \u5e94\u7528\uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002","title":"\u90e8\u7f72 Amazon CloudFormation \u6a21\u677f"},{"location":"deployment/#_2","text":"\u53c2\u6570\u540d\u79f0 \u9ed8\u8ba4\u503c \u63cf\u8ff0 APIGatewayAuthorization AWS_IAM API\u7f51\u5173\u7684\u8ba4\u8bc1\u65b9\u5f0f. \u9ed8\u8ba4\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u4e5f\u53ef\u9009\u62e9 NONE \u5373\u65e0\u6743\u9650\u8ba4\u8bc1\u65b9\u5f0f\uff08\u4e0d\u5b89\u5168\u7684\uff09\uff0c\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u540e\u7528\u6237\u9700\u8981\u624b\u52a8\u5728 API Gateway \u63a7\u5236\u53f0\u914d\u7f6e\u6240\u9700\u7684 \u8d44\u6e90\u8bbf\u95ee\u7b56\u7565 \u3002 APIGatewayStageName prod API\u7f51\u5173\uff08URI\uff09\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84\u5b57\u6bb5\u3002\u8bf7\u53c2\u8003\uff1a \u9636\u6bb5\u53d8\u91cf APIExplorer yes \u90e8\u7f72\u57fa\u4e8e Swagger UI \u7684 API \u8d44\u6e90\u6d4f\u89c8\u5668 \uff0c\u53ef\u89c6\u5316 API \u8d44\u6e90\u5e76\u4e0e\u4e4b\u4ea4\u4e92\u3002\u5b83\u662f\u6839\u636e OpenAPI\uff08\u4ee5\u524d\u79f0\u4e3a Swagger\uff09\u89c4\u8303\u81ea\u52a8\u751f\u6210\u7684\uff0c\u901a\u8fc7\u53ef\u89c6\u5316\u6587\u6863\u4f7f\u67e5\u770b API \u5b9a\u4e49\u4e0e\u6d4b\u8bd5\u53d8\u5f97\u5bb9\u6613\u3002\u8be6\u60c5\u8bf7\u89c1\uff1a API \u8d44\u6e90\u6d4f\u89c8\u5668","title":"\u901a\u7528\u914d\u7f6e\u53c2\u6570"},{"location":"deployment/#ai","text":"\u53c2\u6570\u540d\u79f0 \u9ed8\u8ba4\u503c \u63cf\u8ff0 GeneralOCR no \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u6587\u5b57\u8bc6\u522b\u6280\u672f\u624b\u518c ImageSuperResolution no \u90e8\u7f72 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u6280\u672f\u624b\u518c HumanImageSegmentation no \u90e8\u7f72 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u667a\u80fd\u4eba\u50cf\u5206\u5272\u6280\u672f\u624b\u518c NudityDetection no \u90e8\u7f72 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838\u6280\u672f\u624b\u518c GeneralOCRTraditional no \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09\u6280\u672f\u624b\u518c CustomOCR no \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b\u6280\u672f\u624b\u518c ObjectRecognition no \u90e8\u7f72 \u901a\u7528\u7269\u4f53\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u6587\u5b57\u8bc6\u522b\u6280\u672f\u624b\u518c FaceDetection no \u90e8\u7f72 \u4eba\u8138\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u901a\u7528\u7269\u4f53\u8bc6\u522b\u6280\u672f\u624b\u518c FaceComparison no \u90e8\u7f72 \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4eba\u8138\u8bc6\u522b\u6280\u672f\u624b\u518c HumanAttributeRecognition no \u90e8\u7f72 \u4eba\u4f53\u7ed3\u6784\u5316\u5c5e\u6027 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4eba\u4f53\u7ed3\u6784\u5316\u5c5e\u6027\u6280\u672f\u624b\u518c CarLicensePlate no \u90e8\u7f72 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b\u6280\u672f\u624b\u518c TextSimilarity no \u90e8\u7f72 \u6587\u672c\u76f8\u4f3c\u5ea6 \uff0c\u5982\u9700\u90e8\u7f72\u8bf7\u9009\u4e2d'yes'\uff0c\u8be6\u60c5\u8bf7\u89c1 \u6587\u672c\u76f8\u4f3c\u5ea6\u6280\u672f\u624b\u518c \u5728 \u914d\u7f6e\u5806\u6808\u9009\u9879 \u9875\u9762\uff0c\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u5ba1\u6838 \u9875\u9762\uff0c\u67e5\u770b\u5e76\u786e\u8ba4\u8bbe\u7f6e\u3002\u786e\u4fdd\u9009\u4e2d\u786e\u8ba4\u6a21\u677f\u5c06\u521b\u5efaAmazon Identity and Access Management\uff08IAM\uff09\u8d44\u6e90\u7684\u590d\u9009\u6846\u3002\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u9009\u62e9 \u521b\u5efa\u5806\u6808 \u4ee5\u90e8\u7f72\u5806\u6808\u3002 \u60a8\u53ef\u4ee5\u5728AWS CloudFormation\u63a7\u5236\u53f0\u7684 \u72b6\u6001 \u5217\u4e2d\u67e5\u770b\u5806\u6808\u7684\u72b6\u6001\u3002\u521b\u5efa\u5b8c\u6210\u540e\u5373\u53ef\u770b\u5230\u72b6\u6001\u4e3a CREATE_COMPLETE \u3002","title":"AI \u5e94\u7528\u5217\u8868\u53c2\u6570"},{"location":"deployment/#amazon-cloudformation_1","text":"\u501f\u52a9 Amazon CloudFormation\uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u5806\u6808\u4e2d\u73b0\u6709\u8d44\u6e90\u7684\u5c5e\u6027\uff0c\u5982\u679c\u60a8\u9700\u8981\u6dfb\u52a0\u6216\u5220\u9664\u5df2\u7ecf\u90e8\u7f72\u7684 AI \u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u5806\u6808\u7684\u65b9\u5f0f\u5b8c\u6210\u3002 \u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\uff0c\u9009\u62e9\u5806\u6808\u5217\u8868\u4e2d\u521b\u5efa\u5b8c\u6210\u7684 AI Solution Kit \u5806\u6808\u3002 \u5728\u5806\u6808\u8be6\u7ec6\u4fe1\u606f\u7a97\u683c\u4e2d\uff0c\u9009\u62e9 Update (\u66f4\u65b0)\u3002 \u5728\u6a21\u677f\u53c2\u6570\u90e8\u5206\uff0c\u6307\u5b9a\u9700\u8981\u6dfb\u52a0\u6216\u5220\u9664\u7684 AI \u529f\u80fd\u6216\u53c2\u6570\u4fe1\u606f\uff0c\u7136\u540e\u9009\u62e9 Next (\u4e0b\u4e00\u6b65)\u3002 \u5728 \u914d\u7f6e\u5806\u6808\u9009\u9879 \u9875\u9762\uff0c\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u5ba1\u6838 \u9875\u9762\uff0c\u67e5\u770b\u5e76\u786e\u8ba4\u8bbe\u7f6e\u3002\u786e\u4fdd\u9009\u4e2d\u786e\u8ba4\u6a21\u677f\u5c06\u521b\u5efaAmazon Identity and Access Management\uff08IAM\uff09\u8d44\u6e90\u7684\u590d\u9009\u6846\u3002\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5982\u679c\u60a8\u5bf9\u6240\u505a\u66f4\u6539\u8868\u793a\u6ee1\u610f\uff0c\u8bf7\u9009\u62e9 Updata stack (\u66f4\u65b0\u5806\u6808)\u3002","title":"\u66f4\u65b0 Amazon CloudFormation \u5806\u6808"},{"location":"design/","text":"\u67b6\u6784\u6982\u89c8 \u7528\u6237\u6216\u7a0b\u5e8f\u53d1\u9001 API \u8bf7\u6c42\u81f3 Amazon API Gateway\uff0c\u8bf7\u6c42 payload \u4e2d\u9700\u8981\u5305\u542b\u88ab\u5904\u7406\u7684\u56fe\u7247\u6216\u6587\u5b57\u4fe1\u606f\uff0cAmazon API Gateway \u63a5\u6536\u5230 HTTP \u5230\u8bf7\u6c42\u540e\uff0c\u5c06\u8bf7\u6c42\u6570\u636e\u53d1\u9001\u7ed9\u5bf9\u5e94\u7684 Amazon Lambda \u51fd\u6570\u6216 Amazon SageMaker Endpoint\uff0c\u4ece\u800c\u5b9e\u73b0\u63a8\u7406\u8fc7\u7a0b\uff0c\u5e76\u5c06\u63a8\u7406\u7ed3\u679c\uff08\u901a\u5e38\u4e3aJSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u3002 \u672c\u89e3\u51b3\u65b9\u6848\u67b6\u6784\u4e2d\u5305\u542b\u4e24\u7c7b AI \u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u5f0f\uff08Amazon SageMaker \u67b6\u6784\u53ea\u9002\u7528\u4e8e\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u65b9\u6848\uff09 \u57fa\u4e8e Amazon Lambda \u67b6\u6784 Amazon API Gateway \u5c06\u63a5\u6536\u5230\u7684\u7528\u6237\u8bf7\u6c42\u76f4\u63a5\u53d1\u9001\u7ed9 Lambda \u51fd\u6570\uff0c\u7531 Lambda \u51fd\u6570\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u57fa\u4e8e Amazon SageMaker \u67b6\u6784 \u9996\u5148 API Gateway \u5c06\u7528\u6237\u8bf7\u6c42\u53d1\u9001\u5230 Lambda\uff08invoke endpoint\uff09\u51fd\u6570\uff0c\u901a\u8fc7 Lambda \u8c03\u7528 SageMaker Endpoint\uff0c\u5728 SageMaker \u4e2d\u6267\u884c\u63a8\u7406\u8fc7\u7a0b\u5e76\u8fd4\u56de\u63a8\u7406\u7ed3\u679c\u3002 //TODO \u7ec4\u4ef6 Amazon API Gateway \u672c\u89e3\u51b3\u65b9\u6848\u4f7f\u7528API Gateway\u8def\u7531\u7528\u6237\u7684 HTTP POST \u8bf7\u6c42\uff1b \u540c\u65f6\u8fd8\u53ef\u4f7f\u7528API Gateway\u4e2d\u81ea\u5b9a\u4e49\u57df\u540d\u6765\u5173\u8054\u7528\u6237ICP\u5907\u6848\u7684\u57df\u540d\uff1b\u7528\u6237\u7684 HTTP POST \u8bf7\u6c42\u4e2d\u53ef\u643a\u5e26\u56fe\u7247\u7684base64\u7f16\u7801\uff1b API Gateway\u4e2d\u8fd8\u53ef\u4ee5\u8fdb\u884c\u5bc6\u94a5\u8bbe\u7f6e\u6765\u5bf9 HTTP POST \u8bf7\u6c42\u65b9\u8fdb\u884c\u6388\u6743\uff1b\u8fd8\u901a\u8fc7API Gateway\u5c06\u7528\u6237\u7684\u8bf7\u6c42\u8f6c\u53d1\u5230 Amazon Lambda \u8fdb\u884c\u63a8\u7406\u8fd0\u7b97 Amazon Lambda (\u57fa\u4e8e Lambda \u7684\u67b6\u6784\u7c7b\u578b) Lambda\u51fd\u6570\u8d1f\u8d23\u5904\u7406\u7528\u6237\u7684\u8bf7\u6c42\u5e76\u8fdb\u884c\u63a8\u7406\u8fd0\u7b97\u3002","title":"\u67b6\u6784\u6982\u89c8"},{"location":"design/#_1","text":"\u7528\u6237\u6216\u7a0b\u5e8f\u53d1\u9001 API \u8bf7\u6c42\u81f3 Amazon API Gateway\uff0c\u8bf7\u6c42 payload \u4e2d\u9700\u8981\u5305\u542b\u88ab\u5904\u7406\u7684\u56fe\u7247\u6216\u6587\u5b57\u4fe1\u606f\uff0cAmazon API Gateway \u63a5\u6536\u5230 HTTP \u5230\u8bf7\u6c42\u540e\uff0c\u5c06\u8bf7\u6c42\u6570\u636e\u53d1\u9001\u7ed9\u5bf9\u5e94\u7684 Amazon Lambda \u51fd\u6570\u6216 Amazon SageMaker Endpoint\uff0c\u4ece\u800c\u5b9e\u73b0\u63a8\u7406\u8fc7\u7a0b\uff0c\u5e76\u5c06\u63a8\u7406\u7ed3\u679c\uff08\u901a\u5e38\u4e3aJSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u3002 \u672c\u89e3\u51b3\u65b9\u6848\u67b6\u6784\u4e2d\u5305\u542b\u4e24\u7c7b AI \u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u5f0f\uff08Amazon SageMaker \u67b6\u6784\u53ea\u9002\u7528\u4e8e\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u65b9\u6848\uff09","title":"\u67b6\u6784\u6982\u89c8"},{"location":"design/#amazon-lambda","text":"Amazon API Gateway \u5c06\u63a5\u6536\u5230\u7684\u7528\u6237\u8bf7\u6c42\u76f4\u63a5\u53d1\u9001\u7ed9 Lambda \u51fd\u6570\uff0c\u7531 Lambda \u51fd\u6570\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002","title":"\u57fa\u4e8e Amazon Lambda \u67b6\u6784"},{"location":"design/#amazon-sagemaker","text":"\u9996\u5148 API Gateway \u5c06\u7528\u6237\u8bf7\u6c42\u53d1\u9001\u5230 Lambda\uff08invoke endpoint\uff09\u51fd\u6570\uff0c\u901a\u8fc7 Lambda \u8c03\u7528 SageMaker Endpoint\uff0c\u5728 SageMaker \u4e2d\u6267\u884c\u63a8\u7406\u8fc7\u7a0b\u5e76\u8fd4\u56de\u63a8\u7406\u7ed3\u679c\u3002 //TODO","title":"\u57fa\u4e8e Amazon SageMaker \u67b6\u6784"},{"location":"design/#_2","text":"Amazon API Gateway \u672c\u89e3\u51b3\u65b9\u6848\u4f7f\u7528API Gateway\u8def\u7531\u7528\u6237\u7684 HTTP POST \u8bf7\u6c42\uff1b \u540c\u65f6\u8fd8\u53ef\u4f7f\u7528API Gateway\u4e2d\u81ea\u5b9a\u4e49\u57df\u540d\u6765\u5173\u8054\u7528\u6237ICP\u5907\u6848\u7684\u57df\u540d\uff1b\u7528\u6237\u7684 HTTP POST \u8bf7\u6c42\u4e2d\u53ef\u643a\u5e26\u56fe\u7247\u7684base64\u7f16\u7801\uff1b API Gateway\u4e2d\u8fd8\u53ef\u4ee5\u8fdb\u884c\u5bc6\u94a5\u8bbe\u7f6e\u6765\u5bf9 HTTP POST \u8bf7\u6c42\u65b9\u8fdb\u884c\u6388\u6743\uff1b\u8fd8\u901a\u8fc7API Gateway\u5c06\u7528\u6237\u7684\u8bf7\u6c42\u8f6c\u53d1\u5230 Amazon Lambda \u8fdb\u884c\u63a8\u7406\u8fd0\u7b97 Amazon Lambda (\u57fa\u4e8e Lambda \u7684\u67b6\u6784\u7c7b\u578b) Lambda\u51fd\u6570\u8d1f\u8d23\u5904\u7406\u7528\u6237\u7684\u8bf7\u6c42\u5e76\u8fdb\u884c\u63a8\u7406\u8fd0\u7b97\u3002","title":"\u7ec4\u4ef6"},{"location":"faq/","text":"\u5e38\u89c1\u95ee\u9898 \u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4ec0\u4e48\uff1f \u672c\u89e3\u51b3\u65b9\u6848\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u4e91\u4e0a AI \u529f\u80fd\uff0c\u5982\uff1a\u901a\u7528\u6587\u672c\u8bc6\u522b\u3001\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u3001\u8272\u60c5\u56fe\u7247\u5ba1\u6838\u3001\u667a\u80fd\u4eba\u50cf\u5206\u5272\u7b49\u3002\u5ba2\u6237\u53ef\u4ee5\u8fdb\u884c\u4e00\u952e\u5f0f\u79c1\u6709\u5316\u90e8\u7f72\u3002AI \u529f\u80fd\u5c06\u4ee5 API \u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u5ba2\u6237\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 API \u6216\u4f7f\u7528\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305\uff08SDK\uff09\u8c03\u7528\u670d\u52a1\u3002 \u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u9002\u7528\u4e8e\u4ec0\u4e48\u573a\u666f\uff1f \u901a\u7528\u6587\u672c\u8bc6\u522b\uff1a\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\u3002 \u5185\u5bb9\u5ba1\u6838-\u8272\u60c5\u56fe\u7247\uff1a\u53ef\u5e94\u7528\u4e8e\u793e\u4ea4\u5e94\u7528\u3001\u8bba\u575b\u3001\u793e\u533a\u7b49\u9700\u8981\u81ea\u52a8\u5ba1\u6838\u56fe\u50cf\u7684\u573a\u666f\uff0c\u63d0\u5347\u5e73\u53f0\u5185\u5bb9\u8d28\u91cf\u3002 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387\uff1a\u53ef\u5e94\u7528\u4e8e\u9700\u8981\u5bf9\u539f\u59cb\u56fe\u7247\u63d0\u5347\u5206\u8fa8\u7387\u7684\u573a\u666f\uff0c\u5982\u62cd\u7167\u6548\u679c\u589e\u5f3a\u3001\u6587\u5b57\u6863\u6848\u7ffb\u62cd\u3001\u533b\u5b66\u56fe\u50cf\u5904\u7406\u7b49\u573a\u666f\u3002\u4e5f\u53ef\u5728\u5de5\u4e1a\u81ea\u52a8\u5316\u9886\u57df\u7528\u4e8e\u63d0\u9ad8\u4f20\u611f\u5668\u6210\u50cf\u7cbe\u5ea6\uff0c\u63d0\u9ad8\u8bc6\u522b\u7387\u3002 \u667a\u80fd\u4eba\u50cf\u5206\u5272\uff1a\u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u7b49\u573a\u666f\u3002 \u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff1f \u7528\u6237\u6216\u7a0b\u5e8f\u53d1\u9001 API \u8bf7\u6c42\u81f3 Amazon API Gateway\uff0c\u8bf7\u6c42 payload \u4e2d\u9700\u8981\u5305\u542b\u88ab\u5904\u7406\u7684\u56fe\u7247\u6216\u6587\u5b57\u4fe1\u606f\uff0cAmazon API Gateway \u63a5\u6536\u5230 HTTP \u5230\u8bf7\u6c42\u540e\uff0c\u5c06\u8bf7\u6c42\u6570\u636e\u53d1\u9001\u7ed9\u5bf9\u5e94\u7684 Lambda \u51fd\u6570\u6216 SageMaker Endpoint\uff0c\u4ece\u800c\u5b9e\u73b0\u63a8\u7406\u8fc7\u7a0b\uff0c\u5e76\u5c06\u63a8\u7406\u7ed3\u679c\uff08\u901a\u5e38\u4e3aJSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u3002 \u672c\u89e3\u51b3\u65b9\u6848\u67b6\u6784\u4e2d\u5305\u542b\u4e24\u7c7b AI \u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u5f0f\uff08SageMaker \u67b6\u6784\u53ea\u9002\u7528\u4e8e\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u65b9\u6848\uff09 \u57fa\u4e8eLambda \u5b9e\u73b0\uff1a Amazon API Gateway \u5c06\u63a5\u6536\u5230\u7684\u7528\u6237\u8bf7\u6c42\u76f4\u63a5\u53d1\u9001\u7ed9 Lambda \u51fd\u6570\uff0cLambda \u51fd\u6570\u901a\u8fc7\u8c03\u7528\u5b58\u50a8\u5728 Amazon EFS \u91cc\u9762\u7684\u6a21\u578b\u5b8c\u6210\u63a8\u7406\u8ba1\u7b97\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 SageMaker \u5b9e\u73b0\uff1a \u9996\u5148 API Gateway \u5c06\u7528\u6237\u8bf7\u6c42\u53d1\u9001\u5230 Lambda\uff08invoke endpoint\uff09\u51fd\u6570\uff0c\u901a\u8fc7 Lambda \u8c03\u7528 SageMaker Endpoint\uff0c\u5728 SageMaker \u4e2d\u6267\u884c\u63a8\u7406\u8fc7\u7a0b\u5e76\u8fd4\u56de\u63a8\u7406\u7ed3\u679c\u3002 \u6211\u9700\u8981\u5728\u542f\u52a8\u524d\u6ce8\u610f\u54ea\u4e9b\u524d\u63d0\u6761\u4ef6\uff1f \u786e\u4fdd\u60a8\u62e5\u6709\u4e00\u4e2a\u5df2\u7ecfICP\u5907\u6848\u7684\u57df\u540d\u3002 \u6b64\u89e3\u51b3\u65b9\u6848\u652f\u6301\u5728\u54ea\u4e9b\u533a\u57df\u8fd0\u884c\uff1f \u60a8\u53ef\u4ee5\u90e8\u7f72\u5230 Amazon Web Service \u5168\u7403\u4e3b\u8981\u533a\u57df\uff0c\u5305\u62ec\u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684 Amazon Web Service \uff08\u5b81\u590f\uff09\u533a\u57df\u548c\u7531\u5149\u73af\u65b0\u7f51\u8fd0\u8425\u7684 Amazon Web Service \uff08\u5317\u4eac\uff09\u533a\u57df\u3002 \u5982\u4f55\u5feb\u901f\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6848\uff1f \u7528\u6237\u53ef\u4ee5\u5728\u76f4\u63a5\u90e8\u7f72\u9875\u9762\u7684\u90e8\u7f72\u6309\u94ae\u5f00\u59cb\u90e8\u7f72\u3002\u8be6\u60c5\u8bf7\u89c1\u90e8\u7f72\u624b\u518c\u3002 \u4f7f\u7528\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u540e\u7eed\u7684\u5f00\u53d1\u91cf\u662f\u591a\u5c11\uff1f \u7528\u6237\u90e8\u7f72\u672c\u89e3\u51b3\u65b9\u6848\u540e\uff0c\u9700\u8981\u6309\u8bf7\u6c42 HTTP \u63a5\u53e3\u8bf4\u660e\uff0c\u5f00\u53d1\u76f8\u5e94\u63a5\u53e3\u7684\u8c03\u7528\u529f\u80fd\uff0c\u4e5f\u53ef\u4ee5\u5728 Amazon API Gateway \u4e2d\u751f\u6210\u76f8\u5e94 SDK \u4ee3\u7801\uff0c\u4e0e\u4e1a\u52a1\u903b\u8f91\u96c6\u6210\u3002","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"faq/#_1","text":"","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"faq/#_2","text":"\u672c\u89e3\u51b3\u65b9\u6848\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u4e91\u4e0a AI \u529f\u80fd\uff0c\u5982\uff1a\u901a\u7528\u6587\u672c\u8bc6\u522b\u3001\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u3001\u8272\u60c5\u56fe\u7247\u5ba1\u6838\u3001\u667a\u80fd\u4eba\u50cf\u5206\u5272\u7b49\u3002\u5ba2\u6237\u53ef\u4ee5\u8fdb\u884c\u4e00\u952e\u5f0f\u79c1\u6709\u5316\u90e8\u7f72\u3002AI \u529f\u80fd\u5c06\u4ee5 API \u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u5ba2\u6237\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 API \u6216\u4f7f\u7528\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305\uff08SDK\uff09\u8c03\u7528\u670d\u52a1\u3002","title":"\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4ec0\u4e48\uff1f"},{"location":"faq/#_3","text":"\u901a\u7528\u6587\u672c\u8bc6\u522b\uff1a\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\u3002 \u5185\u5bb9\u5ba1\u6838-\u8272\u60c5\u56fe\u7247\uff1a\u53ef\u5e94\u7528\u4e8e\u793e\u4ea4\u5e94\u7528\u3001\u8bba\u575b\u3001\u793e\u533a\u7b49\u9700\u8981\u81ea\u52a8\u5ba1\u6838\u56fe\u50cf\u7684\u573a\u666f\uff0c\u63d0\u5347\u5e73\u53f0\u5185\u5bb9\u8d28\u91cf\u3002 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387\uff1a\u53ef\u5e94\u7528\u4e8e\u9700\u8981\u5bf9\u539f\u59cb\u56fe\u7247\u63d0\u5347\u5206\u8fa8\u7387\u7684\u573a\u666f\uff0c\u5982\u62cd\u7167\u6548\u679c\u589e\u5f3a\u3001\u6587\u5b57\u6863\u6848\u7ffb\u62cd\u3001\u533b\u5b66\u56fe\u50cf\u5904\u7406\u7b49\u573a\u666f\u3002\u4e5f\u53ef\u5728\u5de5\u4e1a\u81ea\u52a8\u5316\u9886\u57df\u7528\u4e8e\u63d0\u9ad8\u4f20\u611f\u5668\u6210\u50cf\u7cbe\u5ea6\uff0c\u63d0\u9ad8\u8bc6\u522b\u7387\u3002 \u667a\u80fd\u4eba\u50cf\u5206\u5272\uff1a\u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u7b49\u573a\u666f\u3002","title":"\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u9002\u7528\u4e8e\u4ec0\u4e48\u573a\u666f\uff1f"},{"location":"faq/#_4","text":"\u7528\u6237\u6216\u7a0b\u5e8f\u53d1\u9001 API \u8bf7\u6c42\u81f3 Amazon API Gateway\uff0c\u8bf7\u6c42 payload \u4e2d\u9700\u8981\u5305\u542b\u88ab\u5904\u7406\u7684\u56fe\u7247\u6216\u6587\u5b57\u4fe1\u606f\uff0cAmazon API Gateway \u63a5\u6536\u5230 HTTP \u5230\u8bf7\u6c42\u540e\uff0c\u5c06\u8bf7\u6c42\u6570\u636e\u53d1\u9001\u7ed9\u5bf9\u5e94\u7684 Lambda \u51fd\u6570\u6216 SageMaker Endpoint\uff0c\u4ece\u800c\u5b9e\u73b0\u63a8\u7406\u8fc7\u7a0b\uff0c\u5e76\u5c06\u63a8\u7406\u7ed3\u679c\uff08\u901a\u5e38\u4e3aJSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u3002 \u672c\u89e3\u51b3\u65b9\u6848\u67b6\u6784\u4e2d\u5305\u542b\u4e24\u7c7b AI \u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u5f0f\uff08SageMaker \u67b6\u6784\u53ea\u9002\u7528\u4e8e\u56fe\u50cf\u8d85\u5206\u8fa8\u7387\u65b9\u6848\uff09 \u57fa\u4e8eLambda \u5b9e\u73b0\uff1a Amazon API Gateway \u5c06\u63a5\u6536\u5230\u7684\u7528\u6237\u8bf7\u6c42\u76f4\u63a5\u53d1\u9001\u7ed9 Lambda \u51fd\u6570\uff0cLambda \u51fd\u6570\u901a\u8fc7\u8c03\u7528\u5b58\u50a8\u5728 Amazon EFS \u91cc\u9762\u7684\u6a21\u578b\u5b8c\u6210\u63a8\u7406\u8ba1\u7b97\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 SageMaker \u5b9e\u73b0\uff1a \u9996\u5148 API Gateway \u5c06\u7528\u6237\u8bf7\u6c42\u53d1\u9001\u5230 Lambda\uff08invoke endpoint\uff09\u51fd\u6570\uff0c\u901a\u8fc7 Lambda \u8c03\u7528 SageMaker Endpoint\uff0c\u5728 SageMaker \u4e2d\u6267\u884c\u63a8\u7406\u8fc7\u7a0b\u5e76\u8fd4\u56de\u63a8\u7406\u7ed3\u679c\u3002","title":"\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff1f"},{"location":"faq/#_5","text":"\u786e\u4fdd\u60a8\u62e5\u6709\u4e00\u4e2a\u5df2\u7ecfICP\u5907\u6848\u7684\u57df\u540d\u3002","title":"\u6211\u9700\u8981\u5728\u542f\u52a8\u524d\u6ce8\u610f\u54ea\u4e9b\u524d\u63d0\u6761\u4ef6\uff1f"},{"location":"faq/#_6","text":"\u60a8\u53ef\u4ee5\u90e8\u7f72\u5230 Amazon Web Service \u5168\u7403\u4e3b\u8981\u533a\u57df\uff0c\u5305\u62ec\u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684 Amazon Web Service \uff08\u5b81\u590f\uff09\u533a\u57df\u548c\u7531\u5149\u73af\u65b0\u7f51\u8fd0\u8425\u7684 Amazon Web Service \uff08\u5317\u4eac\uff09\u533a\u57df\u3002","title":"\u6b64\u89e3\u51b3\u65b9\u6848\u652f\u6301\u5728\u54ea\u4e9b\u533a\u57df\u8fd0\u884c\uff1f"},{"location":"faq/#_7","text":"\u7528\u6237\u53ef\u4ee5\u5728\u76f4\u63a5\u90e8\u7f72\u9875\u9762\u7684\u90e8\u7f72\u6309\u94ae\u5f00\u59cb\u90e8\u7f72\u3002\u8be6\u60c5\u8bf7\u89c1\u90e8\u7f72\u624b\u518c\u3002","title":"\u5982\u4f55\u5feb\u901f\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6848\uff1f"},{"location":"faq/#_8","text":"\u7528\u6237\u90e8\u7f72\u672c\u89e3\u51b3\u65b9\u6848\u540e\uff0c\u9700\u8981\u6309\u8bf7\u6c42 HTTP \u63a5\u53e3\u8bf4\u660e\uff0c\u5f00\u53d1\u76f8\u5e94\u63a5\u53e3\u7684\u8c03\u7528\u529f\u80fd\uff0c\u4e5f\u53ef\u4ee5\u5728 Amazon API Gateway \u4e2d\u751f\u6210\u76f8\u5e94 SDK \u4ee3\u7801\uff0c\u4e0e\u4e1a\u52a1\u903b\u8f91\u96c6\u6210\u3002","title":"\u4f7f\u7528\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u540e\u7eed\u7684\u5f00\u53d1\u91cf\u662f\u591a\u5c11\uff1f"},{"location":"github/","text":"\u60a8\u53ef\u4ee5\u8bbf\u95ee\u6211\u4eec\u7684 GitHub\u5b58\u50a8\u5e93 \u4e0b\u8f7d\u6b64\u89e3\u51b3\u65b9\u6848\u7684\u6e90\u6587\u4ef6\u3002\u6570\u636e\u4f20\u8f93\u89e3\u51b3\u65b9\u6848\u7684\u6a21\u677f\u662f\u4f7f\u7528 \u4e91\u5f00\u53d1\u5de5\u5177\u5305\uff08CDK\uff09 \u751f\u6210\u7684\u3002\u66f4\u591a\u6709\u5173\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 README.md \u6587\u4ef6\u3002","title":"Github"},{"location":"include-deploy-code/","text":"\u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 {{ no such element: dict object['feature_id'] }} \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"Include deploy code"},{"location":"include-deploy-code/#_1","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"include-deploy-code/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 {{ no such element: dict object['feature_id'] }} \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"include-deploy-cost/","text":"\u6210\u672c\u9884\u4f30 //TODO","title":"Include deploy cost"},{"location":"include-deploy-cost/#_1","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"include-deploy-description/","text":"{{ no such element: dict object['feature_description'] }} \u9002\u7528\u573a\u666f {{ no such element: dict object['feature_scenario'] }}","title":"Include deploy description"},{"location":"include-deploy-description/#_1","text":"{{ no such element: dict object['feature_scenario'] }}","title":"\u9002\u7528\u573a\u666f"},{"location":"include-deploy-lambda/","text":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"Include deploy lambda"},{"location":"include-deploy-lambda/#_1","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"include-deploy-plan/","text":"\u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7Amazon CloudFormation\u5378\u8f7d\u5bf9\u5e94\u7684\u5806\u6808\uff0c\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5927\u7ea6\u9700\u898110\u5206\u949f\u3002","title":"Include deploy plan"},{"location":"include-deploy-plan/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7Amazon CloudFormation\u5378\u8f7d\u5bf9\u5e94\u7684\u5806\u6808\uff0c\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5927\u7ea6\u9700\u898110\u5206\u949f\u3002","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"include-deploy-uninstall/","text":"\u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['destroy_time'] }}","title":"Include deploy uninstall"},{"location":"include-deploy-uninstall/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['destroy_time'] }}","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"include-deploy/","text":"\u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b {{ no such element: dict object['feature_id'] }} \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['deployment_time'] }}","title":"Include deploy"},{"location":"include-deploy/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b {{ no such element: dict object['feature_id'] }} \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['deployment_time'] }}","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"region/","text":"\u672c\u89e3\u51b3\u65b9\u6848 v1.2.0 \u652f\u6301\u90e8\u7f72\u5728\u4ee5\u4e0b\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u533a\u57df\u3002 \u652f\u6301\u90e8\u7f72\u7684\u5168\u7403\u533a\u57df \u533a\u57df\u540d\u79f0 \u533a\u57dfID \u7f8e\u56fd\u4e1c\u90e8\uff08\u5f17\u5409\u5c3c\u4e9a\u5317\u90e8\uff09\u533a\u57df us-east-1 \u7f8e\u56fd\u4e1c\u90e8\uff08\u4fc4\u4ea5\u4fc4\uff09\u533a\u57df us-east-2 \u7f8e\u56fd\u897f\u90e8\uff08\u52a0\u5229\u798f\u5c3c\u4e9a\u5317\u90e8\uff09\u533a\u57df us-west-1 \u7f8e\u56fd\u897f\u90e8\uff08\u4fc4\u52d2\u5188\uff09\u533a\u57df us-west-2 \u4e9a\u592a\u5730\u533a\uff08\u5b5f\u4e70\uff09\u533a\u57df ap-south-1 \u4e9a\u592a\u5730\u533a\uff08\u4e1c\u4eac\uff09\u533a\u57df ap-northeast-1 \u4e9a\u592a\u5730\u533a\uff08\u9996\u5c14\uff09\u533a\u57df ap-northeast-2 \u4e9a\u592a\u5730\u533a\uff08\u65b0\u52a0\u5761\uff09\u533a\u57df ap-southeast-1 \u4e9a\u592a\u5730\u533a\uff08\u6089\u5c3c\uff09\u533a\u57df ap-southeast-2 \u52a0\u62ff\u5927\uff08\u4e2d\u90e8\uff09\u533a\u57df ca-central-1 \u6b27\u6d32\uff08\u7231\u5c14\u5170\uff09\u533a\u57df eu-west-1 \u6b27\u6d32\uff08\u4f26\u6566\uff09\u533a\u57df eu-west-2 \u6b27\u6d32\uff08\u5df4\u9ece\uff09\u533a\u57df eu-west-3 \u6b27\u6d32\uff08\u6cd5\u5170\u514b\u798f\uff09\u533a\u57df eu-central-1 \u5357\u7f8e\u6d32\uff08\u5723\u4fdd\u7f57\uff09\u533a\u57df sa-east-1 \u652f\u6301\u90e8\u7f72\u7684\u4e2d\u56fd\u533a\u57df \u533a\u57df\u540d\u79f0 \u533a\u57dfID \u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5b81\u590f\uff09\u533a\u57df cn-northwest-1 \u7531\u5149\u73af\u65b0\u7f51\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5317\u4eac\uff09\u533a\u57df cn-north-1","title":"Region"},{"location":"region/#_1","text":"\u533a\u57df\u540d\u79f0 \u533a\u57dfID \u7f8e\u56fd\u4e1c\u90e8\uff08\u5f17\u5409\u5c3c\u4e9a\u5317\u90e8\uff09\u533a\u57df us-east-1 \u7f8e\u56fd\u4e1c\u90e8\uff08\u4fc4\u4ea5\u4fc4\uff09\u533a\u57df us-east-2 \u7f8e\u56fd\u897f\u90e8\uff08\u52a0\u5229\u798f\u5c3c\u4e9a\u5317\u90e8\uff09\u533a\u57df us-west-1 \u7f8e\u56fd\u897f\u90e8\uff08\u4fc4\u52d2\u5188\uff09\u533a\u57df us-west-2 \u4e9a\u592a\u5730\u533a\uff08\u5b5f\u4e70\uff09\u533a\u57df ap-south-1 \u4e9a\u592a\u5730\u533a\uff08\u4e1c\u4eac\uff09\u533a\u57df ap-northeast-1 \u4e9a\u592a\u5730\u533a\uff08\u9996\u5c14\uff09\u533a\u57df ap-northeast-2 \u4e9a\u592a\u5730\u533a\uff08\u65b0\u52a0\u5761\uff09\u533a\u57df ap-southeast-1 \u4e9a\u592a\u5730\u533a\uff08\u6089\u5c3c\uff09\u533a\u57df ap-southeast-2 \u52a0\u62ff\u5927\uff08\u4e2d\u90e8\uff09\u533a\u57df ca-central-1 \u6b27\u6d32\uff08\u7231\u5c14\u5170\uff09\u533a\u57df eu-west-1 \u6b27\u6d32\uff08\u4f26\u6566\uff09\u533a\u57df eu-west-2 \u6b27\u6d32\uff08\u5df4\u9ece\uff09\u533a\u57df eu-west-3 \u6b27\u6d32\uff08\u6cd5\u5170\u514b\u798f\uff09\u533a\u57df eu-central-1 \u5357\u7f8e\u6d32\uff08\u5723\u4fdd\u7f57\uff09\u533a\u57df sa-east-1","title":"\u652f\u6301\u90e8\u7f72\u7684\u5168\u7403\u533a\u57df"},{"location":"region/#_2","text":"\u533a\u57df\u540d\u79f0 \u533a\u57dfID \u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5b81\u590f\uff09\u533a\u57df cn-northwest-1 \u7531\u5149\u73af\u65b0\u7f51\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5317\u4eac\uff09\u533a\u57df cn-north-1","title":"\u652f\u6301\u90e8\u7f72\u7684\u4e2d\u56fd\u533a\u57df"},{"location":"resource/","text":"AWS CloudFormation Amazon S3 AWS Lambda AWS Step Functions Amazon CloudFront Amazon ECR Amazon DynamoDB AWS AppSync Amazon Cognito AWS IAM Amazon EC2 Amazon Route 53","title":"Resource"},{"location":"security/","text":"\u5b89\u5168\u4fe1\u606f \u5f53\u60a8\u5728\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u57fa\u7840\u8bbe\u65bd\u4e0a\u6784\u5efa\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5b89\u5168\u8d23\u4efb\u7531\u60a8\u548c\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5171\u540c\u627f\u62c5\u3002\u6b64 \u8d23\u4efb\u5171\u62c5\u6a21\u578b \u51cf\u5c11\u4e86\u60a8\u7684\u64cd\u4f5c\u8d1f\u62c5\uff0c\u8fd9\u662f\u7531\u4e8e\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u64cd\u4f5c\u3001\u7ba1\u7406\u548c\u63a7\u5236\u7ec4\u4ef6\uff0c\u5305\u62ec\u4e3b\u673a\u64cd\u4f5c\u7cfb\u7edf\u3001\u865a\u62df\u5316\u5c42\u4ee5\u53ca\u670d\u52a1\u8fd0\u884c\u6240\u5728\u8bbe\u65bd\u7684\u7269\u7406\u5b89\u5168\u6027\u3002\u6709\u5173\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5b89\u5168\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280 \u4e91\u5b89\u5168 \u3002 IAM\u89d2\u8272 \u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u8eab\u4efd\u548c\u8bbf\u95ee\u7ba1\u7406\uff08IAM\uff09\u89d2\u8272\u5141\u8bb8\u5ba2\u6237\u4e3a\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e0a\u7684\u670d\u52a1\u548c\u7528\u6237\u5206\u914d\u7ec6\u7c92\u5ea6\u8bbf\u95ee\u7b56\u7565\u548c\u6743\u9650\u3002\u6b64\u89e3\u51b3\u65b9\u6848\u521b\u5efa\u4e86\u4e00\u4e9bIAM\u89d2\u8272\uff0c\u8fd9\u4e9b\u89d2\u8272\u6388\u4e88\u89e3\u51b3\u65b9\u6848\u5404\u7ec4\u4ef6\u95f4\u7684\u8bbf\u95ee\u6743\u9650\u3002 Lambda\u7b56\u7565 \u6b64\u89e3\u51b3\u65b9\u6848\u4e2d\u521b\u5efa\u7684Lambda\u7b56\u7565\u5141\u8bb8AWS Lambda Functions\u8bbf\u95eeAmazon DynamoDB\u3001AWS Elemental MediaConvert\u3001Amazon Transcribe\u548cAmazon Translate\u670d\u52a1\u3002","title":"\u5b89\u5168\u4fe1\u606f"},{"location":"security/#_1","text":"\u5f53\u60a8\u5728\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u57fa\u7840\u8bbe\u65bd\u4e0a\u6784\u5efa\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5b89\u5168\u8d23\u4efb\u7531\u60a8\u548c\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5171\u540c\u627f\u62c5\u3002\u6b64 \u8d23\u4efb\u5171\u62c5\u6a21\u578b \u51cf\u5c11\u4e86\u60a8\u7684\u64cd\u4f5c\u8d1f\u62c5\uff0c\u8fd9\u662f\u7531\u4e8e\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u64cd\u4f5c\u3001\u7ba1\u7406\u548c\u63a7\u5236\u7ec4\u4ef6\uff0c\u5305\u62ec\u4e3b\u673a\u64cd\u4f5c\u7cfb\u7edf\u3001\u865a\u62df\u5316\u5c42\u4ee5\u53ca\u670d\u52a1\u8fd0\u884c\u6240\u5728\u8bbe\u65bd\u7684\u7269\u7406\u5b89\u5168\u6027\u3002\u6709\u5173\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5b89\u5168\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280 \u4e91\u5b89\u5168 \u3002","title":"\u5b89\u5168\u4fe1\u606f"},{"location":"security/#iam","text":"\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u8eab\u4efd\u548c\u8bbf\u95ee\u7ba1\u7406\uff08IAM\uff09\u89d2\u8272\u5141\u8bb8\u5ba2\u6237\u4e3a\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e0a\u7684\u670d\u52a1\u548c\u7528\u6237\u5206\u914d\u7ec6\u7c92\u5ea6\u8bbf\u95ee\u7b56\u7565\u548c\u6743\u9650\u3002\u6b64\u89e3\u51b3\u65b9\u6848\u521b\u5efa\u4e86\u4e00\u4e9bIAM\u89d2\u8272\uff0c\u8fd9\u4e9b\u89d2\u8272\u6388\u4e88\u89e3\u51b3\u65b9\u6848\u5404\u7ec4\u4ef6\u95f4\u7684\u8bbf\u95ee\u6743\u9650\u3002","title":"IAM\u89d2\u8272"},{"location":"security/#lambda","text":"\u6b64\u89e3\u51b3\u65b9\u6848\u4e2d\u521b\u5efa\u7684Lambda\u7b56\u7565\u5141\u8bb8AWS Lambda Functions\u8bbf\u95eeAmazon DynamoDB\u3001AWS Elemental MediaConvert\u3001Amazon Transcribe\u548cAmazon Translate\u670d\u52a1\u3002","title":"Lambda\u7b56\u7565"},{"location":"stack/","text":"\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u4e4b\u524d\uff0c\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u89e3\u51b3\u65b9\u6848\u4f7f\u7528\u7684\u4ee5\u4e0b\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280CloudFrormation\u6a21\u677f\u3002 AI-Solution-Kit.template : \u60a8\u53ef\u4ee5\u4f7f\u7528\u8be5\u6a21\u677f\u542f\u52a8\u89e3\u51b3\u65b9\u6848\u4ee5\u53ca\u76f8\u5173\u7ec4\u4ef6\u3002\u60a8\u8fd8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5b9a\u5236\u6a21\u677f\u3002","title":"Stack"},{"location":"upgrade/","text":"v1.0.0 \u5347\u7ea7\u6b65\u9aa4 //TODO","title":"Upgrade"},{"location":"upgrade/#v100","text":"//TODO","title":"v1.0.0 \u5347\u7ea7\u6b65\u9aa4"},{"location":"old/deploy-ocr-en/","text":"Background This deployment guide describes how to deploy AI Solution Kit - Chinese Optical Character Recognition(OCR) solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. The Chinese OCR solution based on AI/ML text recognition technologies, it can automatically extract the text in all kinds of pictures, and returns the text and the coordinates of the text in the picture. The OCR solution support for Simplified Chinese, Traditional Chinese, English languages and numbers. This solution also supports the most commonly used Hong Kong Supplementary Character Set (HKSCS) extensions of traditional Chinese. Solution Description Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures or text) to the Amazon API Gateway via HTTP POST method, then the Amazon Lambda function is invoked by the Amazon API Gateway to finish the text recognition and return the results (in JSON format). By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use. System Architecture Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications. Lambda Integration The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway. Architecture diagram This solution currently supports deployment in Amazon Web Services standard regions. Components Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller. Automated Deployment The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes. Prerequisites (China Region Only) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here . Sign in to Amazon Web Service console Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn. Launch the stack Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region AI Solution Kit - Chinese OCR in Beijing, China region Ningxia Region AI Solution Kit - Chinese OCR in Ningxia, China region Global Regions AI Solution Kit - Chinese OCR CloudFormation template AIKits-Infer-OCR-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Chinese OCR in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint. Get Started You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack. REST API Reference HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description words String Identify text content location JSON Recognized text in the image coordinate values, including top, left, width, height integer value score Float The confidence of the recognized text Sample Response [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] Sample Request Code cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response; Invoke URL via IAM in Postman Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" } Uninstall To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Deploy ocr en"},{"location":"old/deploy-ocr-en/#background","text":"This deployment guide describes how to deploy AI Solution Kit - Chinese Optical Character Recognition(OCR) solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. The Chinese OCR solution based on AI/ML text recognition technologies, it can automatically extract the text in all kinds of pictures, and returns the text and the coordinates of the text in the picture. The OCR solution support for Simplified Chinese, Traditional Chinese, English languages and numbers. This solution also supports the most commonly used Hong Kong Supplementary Character Set (HKSCS) extensions of traditional Chinese.","title":"Background"},{"location":"old/deploy-ocr-en/#solution-description","text":"Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures or text) to the Amazon API Gateway via HTTP POST method, then the Amazon Lambda function is invoked by the Amazon API Gateway to finish the text recognition and return the results (in JSON format). By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use.","title":"Solution Description"},{"location":"old/deploy-ocr-en/#system-architecture","text":"Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications. Lambda Integration The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway.","title":"System Architecture"},{"location":"old/deploy-ocr-en/#architecture-diagram","text":"This solution currently supports deployment in Amazon Web Services standard regions.","title":"Architecture diagram"},{"location":"old/deploy-ocr-en/#components","text":"Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller.","title":"Components"},{"location":"old/deploy-ocr-en/#automated-deployment","text":"The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes.","title":"Automated Deployment"},{"location":"old/deploy-ocr-en/#prerequisites-china-region-only","text":"This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here .","title":"Prerequisites (China Region Only)"},{"location":"old/deploy-ocr-en/#sign-in-to-amazon-web-service-console","text":"Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn.","title":"Sign in to Amazon Web Service console"},{"location":"old/deploy-ocr-en/#launch-the-stack","text":"Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region AI Solution Kit - Chinese OCR in Beijing, China region Ningxia Region AI Solution Kit - Chinese OCR in Ningxia, China region Global Regions AI Solution Kit - Chinese OCR CloudFormation template AIKits-Infer-OCR-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Chinese OCR in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint.","title":"Launch the stack"},{"location":"old/deploy-ocr-en/#get-started","text":"You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack.","title":"Get Started"},{"location":"old/deploy-ocr-en/#rest-api-reference","text":"HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description words String Identify text content location JSON Recognized text in the image coordinate values, including top, left, width, height integer value score Float The confidence of the recognized text Sample Response [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API Reference"},{"location":"old/deploy-ocr-en/#sample-request-code","text":"cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/ocr', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response;","title":"Sample Request Code"},{"location":"old/deploy-ocr-en/#invoke-url-via-iam-in-postman","text":"Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/ocr-2.jpg\" }","title":"Invoke URL via IAM in Postman"},{"location":"old/deploy-ocr-en/#uninstall","text":"To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Uninstall"},{"location":"old/deploy-porn-en/","text":"Background This deployment guide describes how to deploy AI Solution Kit - Porn Image Detection solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. Based on AI/ML image recognition technology, Porn Image Detection solution automatically audits pictures, identifies and obtains multidimensional pornographic quantitative information (normal, sexy, porn). Solution Description Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures) to the Amazon API Gateway via HTTP POST method, then the Amazon Lambda function is invoked by the Amazon API Gateway to finish the image recognition and return the results (in JSON format). By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use. System Architecture Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications. Lambda Integration (the first diagram): The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway. Architecture diagram This solution currently supports deployment in Amazon Web Services standard regions. Components Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller. Automated Deployment The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes. Prerequisites (China Region Only) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here . Sign in to Amazon Web Service console Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn. Launch the stack Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region AI Solution Kit - Porn Image Detection in Beijing, China region Ningxia Region AI Solution Kit - Porn Image Detection in Beijing, China region Global Regions AI Solution Kit - Porn Image Detection in Beijing, China region CloudFormation template AIKits-Porn-Image-Detection-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Porn Image Detection in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint. Get Started You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack. REST API Reference HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description normal Float Identify the image\u2019s normal dimensions of the image sexy Float Identify the image\u2019s sexy dimension porn Float Identify the pornographic dimensions of recognized images Sample Response { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 } Sample Request Code cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response; Invoke URL via IAM in Postman Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" } Uninstall To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Deploy porn en"},{"location":"old/deploy-porn-en/#background","text":"This deployment guide describes how to deploy AI Solution Kit - Porn Image Detection solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. Based on AI/ML image recognition technology, Porn Image Detection solution automatically audits pictures, identifies and obtains multidimensional pornographic quantitative information (normal, sexy, porn).","title":"Background"},{"location":"old/deploy-porn-en/#solution-description","text":"Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures) to the Amazon API Gateway via HTTP POST method, then the Amazon Lambda function is invoked by the Amazon API Gateway to finish the image recognition and return the results (in JSON format). By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use.","title":"Solution Description"},{"location":"old/deploy-porn-en/#system-architecture","text":"Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications. Lambda Integration (the first diagram): The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway.","title":"System Architecture"},{"location":"old/deploy-porn-en/#architecture-diagram","text":"This solution currently supports deployment in Amazon Web Services standard regions.","title":"Architecture diagram"},{"location":"old/deploy-porn-en/#components","text":"Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller.","title":"Components"},{"location":"old/deploy-porn-en/#automated-deployment","text":"The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes.","title":"Automated Deployment"},{"location":"old/deploy-porn-en/#prerequisites-china-region-only","text":"This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here .","title":"Prerequisites (China Region Only)"},{"location":"old/deploy-porn-en/#sign-in-to-amazon-web-service-console","text":"Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn.","title":"Sign in to Amazon Web Service console"},{"location":"old/deploy-porn-en/#launch-the-stack","text":"Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region AI Solution Kit - Porn Image Detection in Beijing, China region Ningxia Region AI Solution Kit - Porn Image Detection in Beijing, China region Global Regions AI Solution Kit - Porn Image Detection in Beijing, China region CloudFormation template AIKits-Porn-Image-Detection-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Porn Image Detection in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint.","title":"Launch the stack"},{"location":"old/deploy-porn-en/#get-started","text":"You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack.","title":"Get Started"},{"location":"old/deploy-porn-en/#rest-api-reference","text":"HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description normal Float Identify the image\u2019s normal dimensions of the image sexy Float Identify the image\u2019s sexy dimension porn Float Identify the pornographic dimensions of recognized images Sample Response { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 }","title":"REST API Reference"},{"location":"old/deploy-porn-en/#sample-request-code","text":"cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/porn', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response;","title":"Sample Request Code"},{"location":"old/deploy-porn-en/#invoke-url-via-iam-in-postman","text":"Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/detect-1.jpg\" }","title":"Invoke URL via IAM in Postman"},{"location":"old/deploy-porn-en/#uninstall","text":"To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Uninstall"},{"location":"old/deploy-seg-en/","text":"Background This deployment guide describes how to deploy AI Solution Kit - Human Image Segmentation solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. Based on deep learning model, Human Image Segmentation solution to identify the outline of the person and body-part in the image, to separate it from the background with high accuracy segmentation. Solution Description Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures) to the Amazon API Gateway via HTTP POST verb, then the Amazon Lambda function is invoked by the Amazon API Gateway, and returns the Base64 encoded Alpha channel image data after removing the background. By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use. System Architecture Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications, in AI Kits solution. Lambda Integration (the first diagram): The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway. Architecture diagram This solution currently supports deployment in Amazon Web Services standard regions. Components Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller. Instance Type The Human Image Segmentation solution includes two architecture design types based on Lambda functions. When deploying this solution, users only need to choose one of them for deployment according to actual business scenarios. The Lambda function architecture is designed for serverless architecture, and users only pay for the actual usage. Automated Deployment The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes. Prerequisites (China Region Only) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here . Sign in to Amazon Web Service console Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn. Launch the stack Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region AI Solution Kit - Human Image Segmentation in Beijing, China region Ningxia Region AI Solution Kit - Human Image Segmentation in Ningxia, China region Global Regions AI Solution Kit - Human Image Segmentation CloudFormation template AIKits-Human-Seg-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Human Image Segmentation in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint. Get Started You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack. REST API Reference HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description result String Base64 encoded Alpha channel image data after removing the background Sample Response { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Sample Request Code cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response; Invoke URL via IAM in Postman Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" } Uninstall To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Deploy seg en"},{"location":"old/deploy-seg-en/#background","text":"This deployment guide describes how to deploy AI Solution Kit - Human Image Segmentation solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. Based on deep learning model, Human Image Segmentation solution to identify the outline of the person and body-part in the image, to separate it from the background with high accuracy segmentation.","title":"Background"},{"location":"old/deploy-seg-en/#solution-description","text":"Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures) to the Amazon API Gateway via HTTP POST verb, then the Amazon Lambda function is invoked by the Amazon API Gateway, and returns the Base64 encoded Alpha channel image data after removing the background. By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use.","title":"Solution Description"},{"location":"old/deploy-seg-en/#system-architecture","text":"Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications, in AI Kits solution. Lambda Integration (the first diagram): The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway.","title":"System Architecture"},{"location":"old/deploy-seg-en/#architecture-diagram","text":"This solution currently supports deployment in Amazon Web Services standard regions.","title":"Architecture diagram"},{"location":"old/deploy-seg-en/#components","text":"Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller.","title":"Components"},{"location":"old/deploy-seg-en/#instance-type","text":"The Human Image Segmentation solution includes two architecture design types based on Lambda functions. When deploying this solution, users only need to choose one of them for deployment according to actual business scenarios. The Lambda function architecture is designed for serverless architecture, and users only pay for the actual usage.","title":"Instance Type"},{"location":"old/deploy-seg-en/#automated-deployment","text":"The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes.","title":"Automated Deployment"},{"location":"old/deploy-seg-en/#prerequisites-china-region-only","text":"This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here .","title":"Prerequisites (China Region Only)"},{"location":"old/deploy-seg-en/#sign-in-to-amazon-web-service-console","text":"Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn.","title":"Sign in to Amazon Web Service console"},{"location":"old/deploy-seg-en/#launch-the-stack","text":"Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region AI Solution Kit - Human Image Segmentation in Beijing, China region Ningxia Region AI Solution Kit - Human Image Segmentation in Ningxia, China region Global Regions AI Solution Kit - Human Image Segmentation CloudFormation template AIKits-Human-Seg-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Human Image Segmentation in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint.","title":"Launch the stack"},{"location":"old/deploy-seg-en/#get-started","text":"You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack.","title":"Get Started"},{"location":"old/deploy-seg-en/#rest-api-reference","text":"HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description result String Base64 encoded Alpha channel image data after removing the background Sample Response { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" }","title":"REST API Reference"},{"location":"old/deploy-seg-en/#sample-request-code","text":"cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/seg', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response;","title":"Sample Request Code"},{"location":"old/deploy-seg-en/#invoke-url-via-iam-in-postman","text":"Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/seg-2.jpg\" }","title":"Invoke URL via IAM in Postman"},{"location":"old/deploy-seg-en/#uninstall","text":"To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Uninstall"},{"location":"old/deploy-sr-en/","text":"Background This deployment guide describes how to deploy AI Solution Kit - Image Super Resolution solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. Image Super Resolution solution based on pre-trained networks, super sesolution feature enhancing the resolution of an image from low-resolution to high. Solution Description Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures) to the Amazon API Gateway via HTTP POST method, then the Amazon Lambda function is invoked by the Amazon API Gateway, and returns the Base64 encoded Alpha channel image data after super solution. By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use. System Architecture Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications, in AI Kits solution, there are two types of AI feature implementations: Lambda function and SageMaker. Lambda Integration The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway. SageMaker Integration The Lambda function (invoke endpoint) parses the value and sends it to the Amazon SageMaker model endpoint, the SageMaker model performs the prediction and returns the predicted value to the Lambda. The same with the Lambda implementations, the Amazon API Gateway subsequently receives the response from the Lambda function and maps it to a response that is sent back to the client. Architecture diagram This solution currently supports deployment in Amazon Web Services standard regions. Lambda Integration SageMaker Integration Components Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller. Amazon SageMaker SageMaker cluster handles customers inference request, the face detection, human body detection and face comparison models are loaded according deployment configuration. Sagemaker endpoints could be configured to auto-scaling according to requests' pattern to support high-concurrency application scenarios. Instance Type Image Super Resolution solution includes two architecture design types based on Lambda functions and SageMaker GPU instances (see System Architecture). When deploying this solution, users only need to choose one of them for deployment according to actual business scenarios. The Lambda function architecture is designed for serverless architecture, and users only pay for the actual usage. The SageMaker GPU architecture runs on a managed service based on Amazon SageMaker instances and aims to provide high availability and high-performance real-time inference for use cases that require real-time prediction. Automated Deployment The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes. Prerequisites (China Region Only) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here . Sign in to Amazon Web Service console Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn. Launch the stack Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region(GPU) AI Solution Kits - Super Resolution with Amazon SageMaker GPU Instance Ningxia Region(GPU) AI Solution Kits - Super Resolution with Amazon SageMaker GPU Instance Global Regions(GPU) AI Solution Kits - Super Resolution with Amazon SageMaker GPU Instance Global Regions(Inf1) AI Solution Kits - Super Resolution with Amazon SageMaker Inf1 Instance Beijing Region(Lambda) AI Solution Kits - Super Resolution with Amazon Lambda Ningxia Region(Lambda) AI Solution Kits - Super Resolution with Amazon Lambda Global Regions(Lambda) AI Solution Kits - Super Resolution with Amazon Lambda CloudFormation template AIKits-Super-Resolution-Stack.template AIKits-Super-Resolution-Inf1-Stack.template AIKits-Super-Resolution-GPU-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Image Super Resolution in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint. Get Started You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack. REST API Reference HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data scale Integer Optional The support magnification is 2 or 4, the default value is 2 Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description result String The base64 encoded image data after scaling Sample Response { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Sample Request Code cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response; Invoke URL via IAM in Postman Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-2.jpg\" } Uninstall To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Deploy sr en"},{"location":"old/deploy-sr-en/#background","text":"This deployment guide describes how to deploy AI Solution Kit - Image Super Resolution solution by Amazon CloudFormation templates. The AI and ML driven applications are maturing rapidly and creating new demands on enterprises, the AI Solution Kit provides diversified leading AI/ML solutions that are easy to use. Customers can easily work with the REST API or software development kit (SDK) provided by AI/ML solution. Image Super Resolution solution based on pre-trained networks, super sesolution feature enhancing the resolution of an image from low-resolution to high.","title":"Background"},{"location":"old/deploy-sr-en/#solution-description","text":"Once the solution deployed by Amazon CloudFormation template, customers can use this solution feature by calling HTTP (s) or API interfaces, the REST API interface which created by Amazon API Gateway provides customers the AI services and customers can send request (pictures) to the Amazon API Gateway via HTTP POST method, then the Amazon Lambda function is invoked by the Amazon API Gateway, and returns the Base64 encoded Alpha channel image data after super solution. By using a serverless architecture, such as Amazon Lambda, Amazon API Gateway, serverless works in a pay-as-you-go manner, which means that customers only pay for those resources which they actually use.","title":"Solution Description"},{"location":"old/deploy-sr-en/#system-architecture","text":"Starting from the API User(s) side, the API user sends an HTTP request to Amazon API Gateway to pass payload parameters. The API Gateway is a layer that provides the RESTful API to the client for the AI applications, in AI Kits solution, there are two types of AI feature implementations: Lambda function and SageMaker. Lambda Integration The ML models are stored in Amazon EFS, the AI algorithm are implemented in the Lambda function, the Lambda function parses the values from API Gateway and performs model in EFS. After that, it returns a value (JSON format) and sends it back to the API Gateway. SageMaker Integration The Lambda function (invoke endpoint) parses the value and sends it to the Amazon SageMaker model endpoint, the SageMaker model performs the prediction and returns the predicted value to the Lambda. The same with the Lambda implementations, the Amazon API Gateway subsequently receives the response from the Lambda function and maps it to a response that is sent back to the client.","title":"System Architecture"},{"location":"old/deploy-sr-en/#architecture-diagram","text":"This solution currently supports deployment in Amazon Web Services standard regions. Lambda Integration SageMaker Integration","title":"Architecture diagram"},{"location":"old/deploy-sr-en/#components","text":"Amazon API Gateway This solution uses API Gateway to route HTTP requests To associate the domain name registered by the ICP API Gateway can also set a key to authorize the HTTP POST requester Amazon Lambda The Lambda function handles the customer's requests for inference. Amazon EFS Amazon EFS stores machine learning models based on Lambda pre-training. Lambda functions perform inference calculations by calling models stored in Amazon EFS and return the results to the caller. Amazon SageMaker SageMaker cluster handles customers inference request, the face detection, human body detection and face comparison models are loaded according deployment configuration. Sagemaker endpoints could be configured to auto-scaling according to requests' pattern to support high-concurrency application scenarios.","title":"Components"},{"location":"old/deploy-sr-en/#instance-type","text":"Image Super Resolution solution includes two architecture design types based on Lambda functions and SageMaker GPU instances (see System Architecture). When deploying this solution, users only need to choose one of them for deployment according to actual business scenarios. The Lambda function architecture is designed for serverless architecture, and users only pay for the actual usage. The SageMaker GPU architecture runs on a managed service based on Amazon SageMaker instances and aims to provide high availability and high-performance real-time inference for use cases that require real-time prediction.","title":"Instance Type"},{"location":"old/deploy-sr-en/#automated-deployment","text":"The following deployment instructions apply to solutions deployed in the Amazon Web Services (Ningxia) region operated by NWCD or the Amazon Web Services (Beijing) region operated by Sinnet. You can use the following link to quickly launch an Amazon CloudFormation stack to deploy and manage this solution. Time to deploy : Approximately 15 minutes.","title":"Automated Deployment"},{"location":"old/deploy-sr-en/#prerequisites-china-region-only","text":"This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests that can be accessed without authentication in the Beijing region, please make sure that your Amazon Web Services account has passed the Internet Content Provider (ICP) for the record, port 80/443 can be opened normally, please refer to here .","title":"Prerequisites (China Region Only)"},{"location":"old/deploy-sr-en/#sign-in-to-amazon-web-service-console","text":"Sign in to the Amazon Web Service Management Console with the IAM permissions (such as: APIGatewayInvokeFullAcces ). Please use Sign in to amazon.com to sign in your Amazon Web Services account, for China region via https://console.amazonaws.cn.","title":"Sign in to Amazon Web Service console"},{"location":"old/deploy-sr-en/#launch-the-stack","text":"Open the Amazon Web Services console and use the Region selector in the console navigation bar to launch this solution in a different Amazon Web Service Region. Then, click the applicable link to launch the solution Amazon CloudFormation template. You can also download the template as a starting point for your own implementation. Launch Solution Description Beijing Region(GPU) AI Solution Kits - Super Resolution with Amazon SageMaker GPU Instance Ningxia Region(GPU) AI Solution Kits - Super Resolution with Amazon SageMaker GPU Instance Global Regions(GPU) AI Solution Kits - Super Resolution with Amazon SageMaker GPU Instance Global Regions(Inf1) AI Solution Kits - Super Resolution with Amazon SageMaker Inf1 Instance Beijing Region(Lambda) AI Solution Kits - Super Resolution with Amazon Lambda Ningxia Region(Lambda) AI Solution Kits - Super Resolution with Amazon Lambda Global Regions(Lambda) AI Solution Kits - Super Resolution with Amazon Lambda CloudFormation template AIKits-Super-Resolution-Stack.template AIKits-Super-Resolution-Inf1-Stack.template AIKits-Super-Resolution-GPU-Stack.template By default, the template will start after you log in after the default console area. To launch the solution in a designated Amazon Web Service region, please select it from the region drop-down list in the console navigation bar. On the Specify template page, verify that you selected the correct template and choose Next. On the Specify stack details page, assign a name to AI Solution Kit - Image Super Resolution in the Stack name field. Under Parameters , review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Parameter Default Description customStageName prod The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). customAuthType AWS_IAM Authorization for API Gateway. Valid Values are AWS_IAM and NONE . On the Review page, review and confirm the settings. Check the boxes acknowledging that the template will create Amazon Web Service Identity and Access Management (IAM) resources and any additional capabilities required. Choose Create to deploy the stack. View the status of the stack in the Amazon CloudFormation console in the Status column. You should receive a status of CREATE_COMPLETE in approximately 15 minutes. To see details for the stack resources, choose the Outputs tab. This will include the aikitsInvokeURL value, which is the API Gateway endpoint.","title":"Launch the stack"},{"location":"old/deploy-sr-en/#get-started","text":"You can find the REST API inviking URL with name aikitsInvokeURL in the Outputs tab of Amazon CloudFormation stack.","title":"Get Started"},{"location":"old/deploy-sr-en/#rest-api-reference","text":"HTTP Method: POST Body Parameters Name Type Optional Description url String Use img or url URL address of the image. Supports HTTP/HTTPS and S3 protocols. Required image format jpg / jpeg / png / bmp, not exceeding the longest side 4096px. img String Use img or url Base64-encoded image data scale Integer Optional The support magnification is 2 or 4, the default value is 2 Sample Request Body { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } Response Prarameters Name Type Description result String The base64 encoded image data after scaling Sample Response { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" }","title":"REST API Reference"},{"location":"old/deploy-sr-en/#sample-request-code","text":"cURL curl --location --request POST 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }' Python (requests) import requests import json url = \"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution\" payload = json.dumps({ \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java (OkHttp) OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); PHP (curl) <?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => 'https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/prod/resolution', CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => '', CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 0, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => 'POST', CURLOPT_POSTFIELDS =>'{ \"url\":\"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\" }', CURLOPT_HTTPHEADER => array( 'Content-Type: application/json' ), )); $response = curl_exec($curl); curl_close($curl); echo $response;","title":"Sample Request Code"},{"location":"old/deploy-sr-en/#invoke-url-via-iam-in-postman","text":"Create a new tab in Postman and enter the API invoke URL in the previous step into the address bar. Select POST as the HTTP verb. Select Amazon Web Service Signature in the Authorization tab, and enterauth details like AccessKey, SecretKey and Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Click the Body tab and select the option raw and then choose the JSON format. Enter the test data in the Body and click the Send button to see the response result. { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-2.jpg\" }","title":"Invoke URL via IAM in Postman"},{"location":"old/deploy-sr-en/#uninstall","text":"To uninstall the solution, delete the CloudFormation stacks: Sign in to the Amazon Web Service CloudFormation console Select the solution\u2019s parent stack. All other solution stacks will be deleted automatically. Choose Delete . You can undeploy the stack in Amazon CloudFormation console. The deletion process takes about 10 minutes.","title":"Uninstall"},{"location":"old/faq-en/","text":"Frequently Asked Questions What is this solution? This is a solution where customers are able to find all up-to-date AI features provided by Amazon Web Service GCR Solutions team. Such as Chinese OCR, image super resolution, pornographic image detection, human image segmentation. AI features list: Infer Chinese OCR Porn Image Detection Image Super Resolution Human Image Segmentation What are the scenarios for this solution? Infer Chinese OCR: Support simplified/traditional Chinese, English and numbers character recognition. Recognizes text on an image as text and returns text coordinates. Porn Image Detection: Identify confidence score (normal, sexy, porn) of inappropriate image. Image Super Resolution: Intelligently zoom in single image for 2~4x magnification. Human Image Segmentation: Segmenting human body from photo images. How does the solution work? Each AI feature will be an individual deployment stack and user can deploy the stack easily. Once deployed, the HTTPS REST invoking endpoint receives the customer request and sent the inference result back to the client. What regions is this solution supported to run in? This solution currently supports deployment in Amazon Web Services standard regions.","title":"Faq en"},{"location":"old/faq-en/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"old/faq-en/#what-is-this-solution","text":"This is a solution where customers are able to find all up-to-date AI features provided by Amazon Web Service GCR Solutions team. Such as Chinese OCR, image super resolution, pornographic image detection, human image segmentation. AI features list: Infer Chinese OCR Porn Image Detection Image Super Resolution Human Image Segmentation","title":"What is this solution?"},{"location":"old/faq-en/#what-are-the-scenarios-for-this-solution","text":"Infer Chinese OCR: Support simplified/traditional Chinese, English and numbers character recognition. Recognizes text on an image as text and returns text coordinates. Porn Image Detection: Identify confidence score (normal, sexy, porn) of inappropriate image. Image Super Resolution: Intelligently zoom in single image for 2~4x magnification. Human Image Segmentation: Segmenting human body from photo images.","title":"What are the scenarios for this solution?"},{"location":"old/faq-en/#how-does-the-solution-work","text":"Each AI feature will be an individual deployment stack and user can deploy the stack easily. Once deployed, the HTTPS REST invoking endpoint receives the customer request and sent the inference result back to the client.","title":"How does the solution work?"},{"location":"old/faq-en/#what-regions-is-this-solution-supported-to-run-in","text":"This solution currently supports deployment in Amazon Web Services standard regions.","title":"What regions is this solution supported to run in?"}]}